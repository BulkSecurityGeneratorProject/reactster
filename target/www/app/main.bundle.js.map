{"version":3,"file":"app/main.bundle.js","sources":["webpack:///./node_modules/availity-reactstrap-validation/node_modules/moment/locale ^\\.\\/.*$","webpack:///(webpack)/hot nonrecursive ^\\.\\/log$","webpack:///./src/main/webapp/app/app.scss","webpack:///./src/main/webapp/app/app.tsx","webpack:///./src/main/webapp/app/config/axios-interceptor.ts","webpack:///./src/main/webapp/app/config/constants.ts","webpack:///./src/main/webapp/app/config/devtools.tsx","webpack:///./src/main/webapp/app/config/error-middleware.ts","webpack:///./src/main/webapp/app/config/logger-middleware.ts","webpack:///./src/main/webapp/app/config/notification-middleware.ts","webpack:///./src/main/webapp/app/config/store.ts","webpack:///./src/main/webapp/app/config/translation.ts","webpack:///./src/main/webapp/app/entities/field-option/field-option-delete-dialog.tsx","webpack:///./src/main/webapp/app/entities/field-option/field-option-detail.tsx","webpack:///./src/main/webapp/app/entities/field-option/field-option-dialog.tsx","webpack:///./src/main/webapp/app/entities/field-option/field-option.reducer.ts","webpack:///./src/main/webapp/app/entities/field-option/field-option.tsx","webpack:///./src/main/webapp/app/entities/field-option/index.tsx","webpack:///./src/main/webapp/app/entities/field-value/field-value-delete-dialog.tsx","webpack:///./src/main/webapp/app/entities/field-value/field-value-detail.tsx","webpack:///./src/main/webapp/app/entities/field-value/field-value-dialog.tsx","webpack:///./src/main/webapp/app/entities/field-value/field-value.reducer.ts","webpack:///./src/main/webapp/app/entities/field-value/field-value.tsx","webpack:///./src/main/webapp/app/entities/field-value/index.tsx","webpack:///./src/main/webapp/app/entities/field/field-delete-dialog.tsx","webpack:///./src/main/webapp/app/entities/field/field-detail.tsx","webpack:///./src/main/webapp/app/entities/field/field-dialog.tsx","webpack:///./src/main/webapp/app/entities/field/field-form.tsx","webpack:///./src/main/webapp/app/entities/field/field.reducer.ts","webpack:///./src/main/webapp/app/entities/field/field.tsx","webpack:///./src/main/webapp/app/entities/field/index.tsx","webpack:///./src/main/webapp/app/entities/form-content/form-content-delete-dialog.tsx","webpack:///./src/main/webapp/app/entities/form-content/form-content-detail.tsx","webpack:///./src/main/webapp/app/entities/form-content/form-content-dialog.tsx","webpack:///./src/main/webapp/app/entities/form-content/form-content.reducer.ts","webpack:///./src/main/webapp/app/entities/form-content/form-content.tsx","webpack:///./src/main/webapp/app/entities/form-content/index.tsx","webpack:///./src/main/webapp/app/entities/form/form-delete-dialog.tsx","webpack:///./src/main/webapp/app/entities/form/form-detail.tsx","webpack:///./src/main/webapp/app/entities/form/form-dialog.tsx","webpack:///./src/main/webapp/app/entities/form/form.reducer.ts","webpack:///./src/main/webapp/app/entities/form/form.tsx","webpack:///./src/main/webapp/app/entities/form/index.tsx","webpack:///./src/main/webapp/app/entities/index.tsx","webpack:///./src/main/webapp/app/index.tsx","webpack:///./src/main/webapp/app/modules/account/index.tsx","webpack:///./src/main/webapp/app/modules/account/password/password.tsx","webpack:///./src/main/webapp/app/modules/account/settings/settings.tsx","webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx","webpack:///./src/main/webapp/app/modules/home/home.scss","webpack:///./src/main/webapp/app/modules/home/home.tsx","webpack:///./src/main/webapp/app/modules/login/login-modal.tsx","webpack:///./src/main/webapp/app/modules/login/login.tsx","webpack:///./src/main/webapp/app/modules/login/logout.tsx","webpack:///./src/main/webapp/app/reducers/account.ts","webpack:///./src/main/webapp/app/reducers/action-type.util.ts","webpack:///./src/main/webapp/app/reducers/administration.ts","webpack:///./src/main/webapp/app/reducers/authentication.ts","webpack:///./src/main/webapp/app/reducers/index.ts","webpack:///./src/main/webapp/app/reducers/layout.ts","webpack:///./src/main/webapp/app/reducers/locale.ts","webpack:///./src/main/webapp/app/reducers/user-management.ts","webpack:///./src/main/webapp/app/routes.tsx","webpack:///./src/main/webapp/app/shared/layout/footer/footer.scss","webpack:///./src/main/webapp/app/shared/layout/footer/footer.tsx","webpack:///./src/main/webapp/app/shared/layout/header/header.scss","webpack:///./src/main/webapp/app/shared/layout/header/header.tsx","webpack:///./src/main/webapp/app/shared/util/pagination.constants.ts","webpack:///./src/main/webapp/i18n/en nonrecursive .json$","webpack:///./src/main/webapp/i18n/en/activate.json","webpack:///./src/main/webapp/i18n/en/audits.json","webpack:///./src/main/webapp/i18n/en/configuration.json","webpack:///./src/main/webapp/i18n/en/error.json","webpack:///./src/main/webapp/i18n/en/field.json","webpack:///./src/main/webapp/i18n/en/fieldOption.json","webpack:///./src/main/webapp/i18n/en/fieldType.json","webpack:///./src/main/webapp/i18n/en/fieldValue.json","webpack:///./src/main/webapp/i18n/en/form.json","webpack:///./src/main/webapp/i18n/en/formContent.json","webpack:///./src/main/webapp/i18n/en/gateway.json","webpack:///./src/main/webapp/i18n/en/global.json","webpack:///./src/main/webapp/i18n/en/health.json","webpack:///./src/main/webapp/i18n/en/home.json","webpack:///./src/main/webapp/i18n/en/login.json","webpack:///./src/main/webapp/i18n/en/logs.json","webpack:///./src/main/webapp/i18n/en/metrics.json","webpack:///./src/main/webapp/i18n/en/password.json","webpack:///./src/main/webapp/i18n/en/register.json","webpack:///./src/main/webapp/i18n/en/reset.json","webpack:///./src/main/webapp/i18n/en/sessions.json","webpack:///./src/main/webapp/i18n/en/settings.json","webpack:///./src/main/webapp/i18n/en/user-management.json","webpack:///./src/main/webapp/static/images/logo-jhipster-react.svg"],"sourcesContent":["var map = {\n\t\"./af\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bg.js\",\n\t\"./bn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-ie.js\",\n\t\"./en-nz\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/es-do.js\",\n\t\"./es.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/fy.js\",\n\t\"./gd\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/gom-latn.js\",\n\t\"./he\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/it.js\",\n\t\"./it.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ko.js\",\n\t\"./ky\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ml.js\",\n\t\"./mr\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ms.js\",\n\t\"./my\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tet.js\",\n\t\"./th\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/tzm.js\",\n\t\"./uk\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale/zh-tw.js\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/availity-reactstrap-validation/node_modules/moment/locale recursive ^\\\\.\\\\/.*$\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/availity-reactstrap-validation/node_modules/moment/locale ^\\.\\/.*$\n// module id = ./node_modules/availity-reactstrap-validation/node_modules/moment/locale recursive ^\\.\\/.*$\n// module chunks = 1","var map = {\n\t\"./log\": \"./node_modules/webpack/hot/log.js\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/webpack/hot ^\\\\.\\\\/log$\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/hot nonrecursive ^\\.\\/log$\n// module id = ./node_modules/webpack/hot ^\\.\\/log$\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/lib/index.js!../../../../node_modules/sass-loader/lib/loader.js!./app.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/lib/index.js!../../../../node_modules/sass-loader/lib/loader.js!./app.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/postcss-loader/lib/index.js!../../../../node_modules/sass-loader/lib/loader.js!./app.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/app/app.scss\n// module id = ./src/main/webapp/app/app.scss\n// module chunks = 1","import './app.scss';\n\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Card } from 'reactstrap';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ModalContainer } from 'react-router-modal';\n\nimport { getSession, logout } from './reducers/authentication';\nimport { setLocale } from './reducers/locale';\nimport Header from './shared/layout/header/header';\nimport Footer from './shared/layout/footer/footer';\nimport AppRoutes from './routes';\nexport interface IAppProps {\n  location: any;\n  isAuthenticated?: boolean;\n  currentLocale: string;\n  getSession: Function;\n  setLocale: Function;\n  logout: Function;\n  getSystemProperties: Function;\n  routes: any;\n}\n\nexport class App extends React.Component<IAppProps, {}> {\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  handleLogout = () => {\n    this.props.logout();\n  }\n\n  render() {\n    const paddingTop = '60px';\n    return (\n      <Router>\n        <div className=\"app-container\" style={{ paddingTop }}>\n          <Header\n            isAuthenticated={this.props.isAuthenticated}\n            currentLocale={this.props.currentLocale}\n            onLocaleChange={this.props.setLocale}\n          />\n          <div className=\"container-fluid view-container\" id=\"app-view-container\">\n            <Card className=\"jh-card\">\n              <AppRoutes/>\n            </Card>\n            <Footer/>\n          </div>\n          <ModalContainer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  isAuthenticated: storeState.authentication.isAuthenticated,\n  currentLocale: storeState.locale.currentLocale,\n  embedded: storeState.layout.embedded\n});\n\nconst mapDispatchToProps = { getSession, setLocale, logout };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/app.tsx","import axios from 'axios';\nimport { getBasePath, Storage } from 'react-jhipster';\n\nconst TIMEOUT = 1000000; // 10000\nconst setupAxiosInterceptors = onUnauthenticated => {\n  const onRequestSuccess = config => {\n    const token = Storage.local.get('jhi-authenticationToken') || Storage.session.get('jhi-authenticationToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    config.timeout = TIMEOUT;\n    config.url = `${getBasePath().replace(/\\/$/, '')}${config.url}`;\n    return config;\n  };\n  const onResponseSuccess = response => response;\n  const onResponseError = err => {\n    const status = err.status || err.response.status;\n    if (status === 403 || status === 401) {\n      onUnauthenticated();\n    }\n    return Promise.reject(err);\n  };\n  axios.interceptors.request.use(onRequestSuccess);\n  axios.interceptors.response.use(onResponseSuccess, onResponseError);\n};\n\nexport default setupAxiosInterceptors;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/axios-interceptor.ts","const config = {\n  VERSION: process.env.VERSION,\n  SERVER_API_URL: process.env.SERVER_API_URL\n};\n\nexport default config;\n\nexport const SERVER_API_URL = '';\n\nexport const messages = {\n  DATA_CREATE_SUCCESS_ALERT: 'Data created successfully!',\n  DATA_DELETE_SUCCESS_ALERT: 'Data deleted successfully!',\n  DATA_UPDATE_ERROR_ALERT: 'Data deleted successfully!'\n};\n\nexport const APP_DATE_FORMAT = 'DD/MM/YY HH:mm';\nexport const APP_LOCAL_DATE_FORMAT = 'DD/MM/YYYY';\nexport const APP_LOCAL_DATETIME_FORMAT = 'YYYY-M-DTh:mm';\nexport const APP_WHOLE_NUMBER_FORMAT = '0,0';\nexport const APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT = '0,0.[00]';\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/constants.ts","import * as React from 'react';\nimport { createDevTools } from 'redux-devtools';\nimport LogMonitor from 'redux-devtools-log-monitor';\nimport DockMonitor from 'redux-devtools-dock-monitor';\n// You can toggle visibility of devTools with ctrl + H\n// and change their position with ctrl + Q\nexport default createDevTools(\n  <DockMonitor toggleVisibilityKey=\"ctrl-h\" changePositionKey=\"ctrl-q\" defaultIsVisible={false}>\n    <LogMonitor />\n  </DockMonitor>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/devtools.tsx","import { isPromise } from 'react-jhipster';\n\nconst getErrorMessage = errorData => {\n  let message = errorData.message;\n  if (errorData.fieldErrors) {\n    errorData.fieldErrors.forEach(fErr => {\n      message += `\\nfield: ${fErr.field},  Object: ${fErr.objectName}, message: ${fErr.message}\\n`;\n    });\n  }\n  return message;\n};\n\nexport default () => next => action => {\n  // If not a promise, continue on\n  if (!isPromise(action.payload)) {\n    return next(action);\n  }\n\n  /**\n   *\n   * The error middleware serves to dispatch the initial pending promise to\n   * the promise middleware, but adds a `catch`.\n   * It need not run in production\n   */\n  if (process.env.NODE_ENV === 'development') {\n    // Dispatch initial pending promise, but catch any errors\n    return next(action).catch(error => {\n      console.error(`${action.type} caught at middleware with reason: ${JSON.stringify(error.message)}.`);\n      if (error && error.response && error.response.data) {\n        const message = getErrorMessage(error.response.data);\n        console.error(`Actual cause: ${message}`);\n      }\n\n      return Promise.reject(error);\n    });\n  }\n  return next(action);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/error-middleware.ts","\nexport default () => next => action => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { type, payload, meta } = action;\n\n    console.groupCollapsed(type);\n    // tslint:disable-next-line\n    console.log('Payload:', payload);\n    // tslint:disable-next-line\n    console.log('Meta:', meta);\n    console.groupEnd();\n  }\n\n  return next(action);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/logger-middleware.ts","import { isPromise } from 'react-jhipster';\n\nexport default () => next => action => {\n  // If not a promise, continue on\n  if (!isPromise(action.payload)) {\n    return next(action);\n  }\n\n  /**\n   *\n   * The notification middleware serves to dispatch the initial pending promise to\n   * the promise middleware, but adds a `then` and `catch.\n   */\n  return next(action).then(response => {\n    if (action.meta && action.meta.successMessage) {\n      // toast(action.meta.successMessage, { type: toast.TYPE.SUCCESS });\n    }\n    return Promise.resolve(response);\n  }).catch(error => {\n    if (action.meta && action.meta.errorMessage) {\n      // toast(action.meta.errorMessage, { type: toast.TYPE.ERROR });\n    }\n    return Promise.reject(error);\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/notification-middleware.ts","import { createStore, applyMiddleware, compose } from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\nimport DevTools from './devtools';\nimport errorMiddleware from './error-middleware';\nimport notificationMiddleware from './notification-middleware';\nimport loggerMiddleware from './logger-middleware';\nimport { loadingBarMiddleware } from 'react-redux-loading-bar';\n\nconst defaultMiddlewares = [\n  thunkMiddleware,\n  errorMiddleware,\n  notificationMiddleware,\n  promiseMiddleware(),\n  loadingBarMiddleware(),\n  loggerMiddleware\n];\nconst composedMiddlewares = middlewares => process.env.NODE_ENV === 'development' ?\n  compose(applyMiddleware(...defaultMiddlewares, ...middlewares), DevTools.instrument()) :\n  compose(applyMiddleware(...defaultMiddlewares, ...middlewares));\n\nconst initialize = (initialState = {}, middlewares = []) => {\n  const store = createStore(reducer, initialState, composedMiddlewares(middlewares));\n\n  // Enable Webpack hot module replacement for reducers\n  if (module.hot) {\n    // TODO : see if reducers can be moved to feature modules and still get HMR working\n    module.hot.accept('../reducers', () => {\n      const nextReducer = require('../reducers').default;\n      store.replaceReducer(nextReducer);\n    });\n  }\n  return store;\n};\n\nexport default initialize;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/store.ts","/* global: require*/\nimport { TranslatorContext, Storage } from 'react-jhipster';\nimport { merge } from 'lodash';\n\nimport { setLocale } from '../reducers/locale';\n\nconst mergeTranslations = requireContext => requireContext.keys().reduce(\n  (merged, key) => merge({ ...merged }, { ...requireContext(key) }),\n  {}\n);\n\n// tslint:disable:object-literal-key-quotes\nconst translations = {\n   'en': mergeTranslations(require.context('../../i18n/en', false, /.json$/))\n};\n// tslint:enable\n\nlet currentLocale;\nconst savedLocale = Storage.local.get('locale', 'en');\nTranslatorContext.setDefaultLocale('en');\nTranslatorContext.setRenderInnerTextForMissingKeys(false);\n\nexport const locales = Object.keys(translations);\n\nexport const registerLocales = store => {\n  locales.forEach(key => {\n    TranslatorContext.registerTranslations(key, translations[key]);\n  });\n  store.subscribe(() => {\n    const previousLocale = currentLocale;\n    currentLocale = store.getState().locale.currentLocale;\n    if (previousLocale !== currentLocale) {\n      Storage.local.set('locale', currentLocale);\n      TranslatorContext.setLocale(currentLocale);\n    }\n  });\n  store.dispatch(setLocale(savedLocale));\n  return savedLocale;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/config/translation.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getEntity, deleteEntity } from './field-option.reducer';\n\nexport interface IFieldOptionDeleteDialogProps {\n  getEntity: ICrudGetAction;\n  deleteEntity: ICrudDeleteAction;\n  fieldOption: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFieldOptionDeleteDialogState {\n  showModal: boolean;\n}\nexport class FieldOptionDeleteDialog extends React.Component<IFieldOptionDeleteDialogProps, IFieldOptionDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteEntity(this.props.fieldOption.id);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/field-option');\n  }\n\n  render() {\n    const { fieldOption } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"reactsterApp.fieldOption.delete.question\" interpolate={{ id: fieldOption.id }}>\n            Are you sure you want to delete this FieldOption?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    fieldOption: storeState.fieldOption.entity\n});\n\nconst mapDispatchToProps = { getEntity, deleteEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldOptionDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFieldOptionDetailProps {\n  getEntity: ICrudGetAction;\n  fieldOption: any;\n  match: any;\n}\n\nexport class FieldOptionDetail extends React.Component<IFieldOptionDetailProps> {\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  render() {\n    const { fieldOption } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.fieldOption.detail.title\">FieldOption</Translate> [<b>{fieldOption.id}</b>]\n        </h2>\n        <dl className=\"row-md jh-entity-details\">\n          <dt>\n            <span id=\"value\">\n              <Translate contentKey=\"reactsterApp.fieldOption.value\">\n              value\n              </Translate>\n            </span>\n          </dt>\n          <dd>\n            {fieldOption.value}\n          </dd>\n          <dt>\n            <span id=\"label\">\n              <Translate contentKey=\"reactsterApp.fieldOption.label\">\n              label\n              </Translate>\n            </span>\n          </dt>\n          <dd>\n            {fieldOption.label}\n          </dd>\n          <dt>\n            <Translate contentKey=\"reactsterApp.fieldOption.field\">\n              Field\n            </Translate>\n          </dt>\n          <dd>\n              {(fieldOption.field) ? fieldOption.field.id : ''}\n          </dd>\n        </dl>\n        <Button tag={Link} to=\"/field-option\" replace color=\"info\">\n          <FaArrowLeft/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.back\">Back</Translate></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    fieldOption: storeState.fieldOption.entity\n});\n\nconst mapDispatchToProps = { getEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldOptionDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\n\nexport interface IFieldOptionDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  fieldOption: any;\n  fields: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFieldOptionDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  fieldId: number;\n  formId: number;\n}\n\nexport class FieldOptionDialog extends React.Component<IFieldOptionDialogProps, IFieldOptionDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew: !this.props.match.params || !this.props.match.params.id,\n      fieldId: 0,\n      formId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n    if (this.props.match.params.fieldId) {\n      this.setState({\n        fieldId: +this.props.match.params.fieldId,\n        formId: +this.props.match.params.formId\n    })\n    }\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    if (!this.state.fieldId) {\n      this.props.history.push('/field-option');\n    } \n    else {\n      this.props.history.push(`/form/${this.state.formId}/field/${this.state.fieldId}/edit`);\n    }\n  }\n\n  fieldUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.fields) {\n        if (id.toString() === this.props.fields[i].id.toString()) {\n            this.setState({\n                fieldId: this.props.fields[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { fieldOption, fields, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose} size=\"lg\">\n      <ModalHeader toggle={this.handleClose}>\n        <Translate contentKey=\"reactsterApp.fieldOption.home.createOrEditLabel\">Create or edit a FieldOption</Translate>\n      </ModalHeader>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : fieldOption} onSubmit={this.saveEntity} >\n          <ModalBody>\n            { fieldOption.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label id=\"valueLabel\" for=\"value\">\n                <Translate contentKey=\"reactsterApp.fieldOption.value\">\n                  value\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"value\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"labelLabel\" for=\"label\">\n                <Translate contentKey=\"reactsterApp.fieldOption.label\">\n                  label\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"label\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"field.id\">\n                <Translate contentKey=\"reactsterApp.fieldOption.field\">Field</Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"field.id\"\n                onChange={this.fieldUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  fields.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              <AvInput type=\"text\"\n                name=\"field.id\"\n                value={this.state.fieldId} />\n            </AvGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      }\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fieldOption: storeState.fieldOption.entity,\n  fields: storeState.fieldOption.fields,\n  loading: storeState.fieldOption.loading,\n  updating: storeState.fieldOption.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldOptionDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option-dialog.tsx","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../reducers/action-type.util';\nimport { messages, SERVER_API_URL } from '../../config/constants';\n\n// import { FieldOption } from './field-option.model';\n\nexport const ACTION_TYPES = {\n  FETCH_FIELDOPTIONS: 'fieldOption/FETCH_FIELDOPTIONS',\n  FETCH_fields: 'fields/FETCH_fields',\n  FETCH_FIELDOPTION:  'fieldOption/FETCH_FIELDOPTION',\n  CREATE_FIELDOPTION: 'fieldOption/CREATE_FIELDOPTION',\n  UPDATE_FIELDOPTION: 'fieldOption/UPDATE_FIELDOPTION',\n  DELETE_FIELDOPTION: 'fieldOption/DELETE_FIELDOPTION'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [],\n  entity: {},\n  fields: [],\n  updating: false,\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_fields):\n    case REQUEST(ACTION_TYPES.FETCH_FIELDOPTIONS):\n    case REQUEST(ACTION_TYPES.FETCH_FIELDOPTION):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_FIELDOPTION):\n    case REQUEST(ACTION_TYPES.UPDATE_FIELDOPTION):\n    case REQUEST(ACTION_TYPES.DELETE_FIELDOPTION):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_fields):\n    case FAILURE(ACTION_TYPES.FETCH_FIELDOPTIONS):\n    case FAILURE(ACTION_TYPES.FETCH_FIELDOPTION):\n    case FAILURE(ACTION_TYPES.CREATE_FIELDOPTION):\n    case FAILURE(ACTION_TYPES.UPDATE_FIELDOPTION):\n    case FAILURE(ACTION_TYPES.DELETE_FIELDOPTION):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_fields):\n      return {\n        ...state,\n        loading: false,\n        fields: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELDOPTIONS):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELDOPTION):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_FIELDOPTION):\n    case SUCCESS(ACTION_TYPES.UPDATE_FIELDOPTION):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_FIELDOPTION):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/field-options';\n\n// Actions\n\nexport const getfields: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_fields,\n  payload: axios.get(`/api/fields?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntities: ICrudGetAction = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_FIELDOPTIONS,\n  payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_FIELDOPTION,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_FIELDOPTION,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_FIELDOPTION,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_FIELDOPTION,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option.reducer.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\n\nimport {\n  getfields,\n  getEntities\n} from './field-option.reducer';\n // tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFieldOptionProps {\n  getEntities: ICrudGetAction;\n  fieldOptions: any[];\n  getfields: ICrudGetAction;\n  match: any;\n}\n\nexport class FieldOption extends React.Component<IFieldOptionProps> {\n  componentDidMount() {\n    this.props.getEntities();\n    this.props.getfields();\n  }\n\n  render() {\n    const { fieldOptions, match } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.fieldOption.home.title\">Field Options</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.fieldOption.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th><Translate contentKey=\"global.field.id\">ID</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldOption.value\">Value</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldOption.label\">Label</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldOption.field\">Field</Translate></th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n                fieldOptions.map((fieldOption, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${fieldOption.id}`} color=\"link\" size=\"sm\">\n                      {fieldOption.id}\n                    </Button>\n                  </td>\n                  <td>\n                    {fieldOption.value}\n                  </td>\n                  <td>\n                    {fieldOption.label}\n                  </td>\n                  <td>\n                    {fieldOption.field ?\n                    <Link to={`field/${fieldOption.field.id}`}>\n                      {fieldOption.field.id}\n                    </Link> : ''}\n                  </td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${fieldOption.id}`} color=\"info\" size=\"sm\">\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${fieldOption.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${fieldOption.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fieldOptions: storeState.fieldOption.entities\n});\n\nconst mapDispatchToProps = { getfields, getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldOption);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option.tsx","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport FieldOption from './field-option';\nimport FieldOptionDetail from './field-option-detail';\nimport FieldOptionDialog from './field-option-dialog';\nimport FieldOptionDeleteDialog from './field-option-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={FieldOption} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/new`} component={FieldOptionDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} component={FieldOptionDeleteDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/edit`} component={FieldOptionDialog} />\n      <Route exact path={`${match.url}/:id`} component={FieldOptionDetail} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getEntity, deleteEntity } from './field-value.reducer';\n\nexport interface IFieldValueDeleteDialogProps {\n  getEntity: ICrudGetAction;\n  deleteEntity: ICrudDeleteAction;\n  fieldValue: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFieldValueDeleteDialogState {\n  showModal: boolean;\n}\nexport class FieldValueDeleteDialog extends React.Component<IFieldValueDeleteDialogProps, IFieldValueDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteEntity(this.props.fieldValue.id);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/field-value');\n  }\n\n  render() {\n    const { fieldValue } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"reactsterApp.fieldValue.delete.question\" interpolate={{ id: fieldValue.id }}>\n            Are you sure you want to delete this FieldValue?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    fieldValue: storeState.fieldValue.entity\n});\n\nconst mapDispatchToProps = { getEntity, deleteEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldValueDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/field-value-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './field-value.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFieldValueDetailProps {\n  getEntity: ICrudGetAction;\n  Entity: any;\n  fieldValue: any;\n  match: any;\n}\n\nexport class FieldValueDetail extends React.Component<IFieldValueDetailProps> {\n\n  componentDidMount() {\n    if (!this.props.Entity) {\n      this.props.getEntity(this.props.match.params.id);\n    }\n  }\n\n  render() {\n    const  fieldValue  = this.props.Entity || this.props.fieldValue;\n    return (\n      <div>\n          {(fieldValue.field) ? fieldValue.field.name : ''} :  {fieldValue.value}\n  \n        {/* <Button tag={Link} to=\"/field-value\" replace color=\"info\">\n          <FaArrowLeft/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.back\">Back</Translate></span>\n        </Button> */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n   fieldValue: storeState.fieldValue.entity\n});\n\nconst mapDispatchToProps = { getEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldValueDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/field-value-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './field-value.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\n\nexport interface IFieldValueDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  fieldValue: any;\n  formContents: any[];\n  fields: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFieldValueDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  formContentId: number;\n  fieldId: number;\n}\n\nexport class FieldValueDialog extends React.Component<IFieldValueDialogProps, IFieldValueDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew: !this.props.match.params || !this.props.match.params.id,\n      formContentId: 0,\n      fieldId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/field-value');\n  }\n\n  formContentUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.formContents) {\n        if (id.toString() === this.props.formContents[i].id.toString()) {\n            this.setState({\n                formContentId: this.props.formContents[i].id\n            });\n        }\n    }\n  }\n\n  fieldUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.fields) {\n        if (id.toString() === this.props.fields[i].id.toString()) {\n            this.setState({\n                fieldId: this.props.fields[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { fieldValue, formContents, fields, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose} size=\"lg\">\n      <ModalHeader toggle={this.handleClose}>\n        <Translate contentKey=\"reactsterApp.fieldValue.home.createOrEditLabel\">Create or edit a FieldValue</Translate>\n      </ModalHeader>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : fieldValue} onSubmit={this.saveEntity} >\n          <ModalBody>\n            { fieldValue.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label id=\"valueLabel\" for=\"value\">\n                <Translate contentKey=\"reactsterApp.fieldValue.value\">\n                  value\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"value\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"formContent.id\">\n                <Translate contentKey=\"reactsterApp.fieldValue.formContent\">Form Content</Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"formContent.id\"\n                onChange={this.formContentUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  formContents.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              <AvInput type=\"hidden\"\n                name=\"formContent.id\"\n                value={this.state.formContentId} />\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"field.id\">\n                <Translate contentKey=\"reactsterApp.fieldValue.field\">Field</Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"field.id\"\n                onChange={this.fieldUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  fields.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              <AvInput type=\"hidden\"\n                name=\"field.id\"\n                value={this.state.fieldId} />\n            </AvGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      }\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fieldValue: storeState.fieldValue.entity,\n  formContents: storeState.fieldValue.formContents,\n  fields: storeState.fieldValue.fields,\n  loading: storeState.fieldValue.loading,\n  updating: storeState.fieldValue.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldValueDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/field-value-dialog.tsx","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../reducers/action-type.util';\nimport { messages, SERVER_API_URL } from '../../config/constants';\n\n// import { FieldValue } from './field-value.model';\n\nexport const ACTION_TYPES = {\n  FETCH_FIELDVALUES: 'fieldValue/FETCH_FIELDVALUES',\n  FETCH_formContents: 'formContents/FETCH_formContents',\n  FETCH_fields: 'fields/FETCH_fields',\n  FETCH_FIELDVALUE:  'fieldValue/FETCH_FIELDVALUE',\n  CREATE_FIELDVALUE: 'fieldValue/CREATE_FIELDVALUE',\n  UPDATE_FIELDVALUE: 'fieldValue/UPDATE_FIELDVALUE',\n  DELETE_FIELDVALUE: 'fieldValue/DELETE_FIELDVALUE'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [],\n  entity: {},\n  formContents: [],\n  fields: [],\n  updating: false,\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_formContents):\n    case REQUEST(ACTION_TYPES.FETCH_fields):\n    case REQUEST(ACTION_TYPES.FETCH_FIELDVALUES):\n    case REQUEST(ACTION_TYPES.FETCH_FIELDVALUE):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_FIELDVALUE):\n    case REQUEST(ACTION_TYPES.UPDATE_FIELDVALUE):\n    case REQUEST(ACTION_TYPES.DELETE_FIELDVALUE):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_formContents):\n    case FAILURE(ACTION_TYPES.FETCH_fields):\n    case FAILURE(ACTION_TYPES.FETCH_FIELDVALUES):\n    case FAILURE(ACTION_TYPES.FETCH_FIELDVALUE):\n    case FAILURE(ACTION_TYPES.CREATE_FIELDVALUE):\n    case FAILURE(ACTION_TYPES.UPDATE_FIELDVALUE):\n    case FAILURE(ACTION_TYPES.DELETE_FIELDVALUE):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_formContents):\n      return {\n        ...state,\n        loading: false,\n        formContents: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_fields):\n      return {\n        ...state,\n        loading: false,\n        fields: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELDVALUES):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELDVALUE):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_FIELDVALUE):\n    case SUCCESS(ACTION_TYPES.UPDATE_FIELDVALUE):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_FIELDVALUE):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/field-values';\n\n// Actions\n\nexport const getformContents: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_formContents,\n  payload: axios.get(`/api/form-contents?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getfields: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_fields,\n  payload: axios.get(`/api/fields?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntities: ICrudGetAction = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_FIELDVALUES,\n  payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_FIELDVALUE,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_FIELDVALUE,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_FIELDVALUE,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_FIELDVALUE,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/field-value.reducer.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\n\nimport {\n  getformContents,\n  getfields,\n  getEntities\n} from './field-value.reducer';\n // tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFieldValueProps {\n  getEntities: ICrudGetAction;\n  fieldValues: any[];\n  getformContents: ICrudGetAction;\n  getfields: ICrudGetAction;\n  match: any;\n}\n\nexport class FieldValue extends React.Component<IFieldValueProps> {\n  componentDidMount() {\n    this.props.getEntities();\n    this.props.getformContents();\n    this.props.getfields();\n  }\n\n  render() {\n    const { fieldValues, match } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.fieldValue.home.title\">Field Values</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.fieldValue.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th><Translate contentKey=\"global.field.id\">ID</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldValue.value\">Value</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldValue.formContent\">Form Content</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.fieldValue.field\">Field</Translate></th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n                fieldValues.map((fieldValue, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${fieldValue.id}`} color=\"link\" size=\"sm\">\n                      {fieldValue.id}\n                    </Button>\n                  </td>\n                  <td>\n                    {fieldValue.value}\n                  </td>\n                  <td>\n                    {fieldValue.formContent ?\n                    <Link to={`formContent/${fieldValue.formContent.id}`}>\n                      {fieldValue.formContent.id}\n                    </Link> : ''}\n                  </td>\n                  <td>\n                    {fieldValue.field ?\n                    <Link to={`field/${fieldValue.field.id}`}>\n                      {fieldValue.field.id}\n                    </Link> : ''}\n                  </td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${fieldValue.id}`} color=\"info\" size=\"sm\">\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${fieldValue.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${fieldValue.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fieldValues: storeState.fieldValue.entities\n});\n\nconst mapDispatchToProps = { getformContents, getfields, getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldValue);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/field-value.tsx","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport FieldValue from './field-value';\nimport FieldValueDetail from './field-value-detail';\nimport FieldValueDialog from './field-value-dialog';\nimport FieldValueDeleteDialog from './field-value-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={FieldValue} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/new`} component={FieldValueDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} component={FieldValueDeleteDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/edit`} component={FieldValueDialog} />\n      <Route exact path={`${match.url}/:id`} component={FieldValueDetail} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-value/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getEntity, deleteEntity } from './field.reducer';\n\nexport interface IFieldDeleteDialogProps {\n  getEntity: ICrudGetAction;\n  deleteEntity: ICrudDeleteAction;\n  field: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFieldDeleteDialogState {\n  showModal: boolean;\n}\nexport class FieldDeleteDialog extends React.Component<IFieldDeleteDialogProps, IFieldDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteEntity(this.props.field.id);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/field');\n  }\n\n  render() {\n    const { field } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"reactsterApp.field.delete.question\" interpolate={{ id: field.id }}>\n            Are you sure you want to delete this Field?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    field: storeState.field.entity\n});\n\nconst mapDispatchToProps = { getEntity, deleteEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './field.reducer';\nimport {\n  getEntities as getFieldOptions\n} from '../field-option/field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\nimport { AvForm, AvGroup, AvInput, AvFeedback, AvField, AvRadioGroup, AvRadio } from 'availity-reactstrap-validation';\n\nexport interface IFieldDetailProps {\n  getEntity: ICrudGetAction;\n  getFieldOptions: ICrudGetAction;\n  field: any;\n  Entity: any;\n  fieldKey: any;\n  fieldValue: any;\n  fieldOptions: any[];\n  match: any;\n}\n\nexport class FieldDetail extends React.Component<IFieldDetailProps> {\n\n  componentDidMount() {\n    if (!this.props.Entity) {\n      this.props.getEntity(this.props.match.params.id);\n    }\n    this.props.getFieldOptions();\n  }\n\n  render() {\n    const { fieldKey, fieldValue } = this.props;\n    const field = this.props.Entity || this.props.field;\n    let fieldOptions = this.props.fieldOptions.filter(fieldOption => fieldOption.field.id === field.id)\n    const fieldType = field => {\n      switch (field.type.toLowerCase()) {\n        case 'text':\n        case 'textarea':\n        case 'number':\n          return <AvInput key={fieldKey}\n          id={field.id}\n          type={field.type.toLowerCase()}\n          className=\"form-control\"\n          name={field.name}\n          title={field.title}\n          value={fieldValue}/>\n        case 'select':\n          return <AvInput type=\"select\" \n          key={fieldKey}\n          name={field.name}\n          label={field.title}\n          value={fieldValue}\n          helpMessage=\"\">\n          {fieldOptions.map(fieldOption => (\n             <option value={fieldOption.value}>{fieldOption.label}</option>\n          ))}\n        </AvInput>\n        case 'radio':\n        return <AvRadioGroup name={field.name} \n        key={fieldKey}\n        value={fieldValue}\n        label={field.title} \n        errorMessage=\"\">\n                {fieldOptions.map(fieldOption => (\n                    <AvRadio label={fieldOption.label} value={fieldOption.value} />\n                ))}\n               </AvRadioGroup>\n        case 'checkbox':\n          return <AvInput key={fieldKey}\n          id={field.id}\n          type={field.type.toLowerCase()}\n          className=\"form-control\"\n          name={field.name}\n          title={field.title}\n          value={fieldValue || 'true'} checked={fieldValue}/>\n      }\n    }\n    return (\n      <div>\n          <AvGroup>       \n            <label>{field.title}</label>\n             { fieldType(field) }\n          </AvGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    field: storeState.field.entity,\n    fieldOptions: storeState.fieldOption.entities\n});\n\nconst mapDispatchToProps = { getEntity, getFieldOptions };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaPlus, FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './field.reducer';\nimport {\n  getEntities as getFieldOptions\n} from '../field-option/field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\n\nexport interface IFieldDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  getFieldOptions: ICrudGetAction;\n  loading: boolean;\n  updating: boolean;\n  field: any;\n  forms: any[];\n  fieldOptions: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFieldDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  formId: number;\n}\n\nexport class FieldDialog extends React.Component<IFieldDialogProps, IFieldDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew:  !this.props.match || !this.props.match.params || !this.props.match.params.id,\n      formId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n    if (this.props.match.params.formId) {\n      this.setState({\n        formId: +this.props.match.params.formId\n    })\n    }\n    this.props.getFieldOptions();\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    if (!this.state.formId) {\n      this.props.history.push('/field');\n    }\n    else {\n      this.props.history.push(`/form/${this.state.formId}/edit`);\n    }\n  }\n\n  formUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.forms) {\n        if (id.toString() === this.props.forms[i].id.toString()) {\n            this.setState({\n                formId: this.props.forms[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { field, forms, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    let fieldOptions = this.props.fieldOptions.filter(fieldOption => fieldOption.field.id === this.props.field.id)\n    return (\n      <div >\n      <div >\n        <Translate contentKey=\"reactsterApp.field.home.createOrEditLabel\">Create or edit a Field</Translate>\n      </div>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : field} onSubmit={this.saveEntity} >\n          <div>\n            { field.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label id=\"typeLabel\">\n                <Translate contentKey=\"reactsterApp.field.type\">\n                  type\n                </Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"type\"\n              >\n                <option value=\"TEXT\">\n                    TEXT\n                </option>\n                <option value=\"TEXTAREA\">\n                    TEXTAREA\n                </option>\n                <option value=\"SELECT\">\n                    SELECT\n                </option>\n                <option value=\"NUMBER\">\n                    NUMBER\n                </option>\n                <option value=\"RADIO\">\n                    RADIO\n                </option>\n                <option value=\"CHECKBOX\">\n                    CHECKBOX\n                </option>\n              </AvInput>\n            </AvGroup>\n            <AvGroup>\n              {\n                fieldOptions.map(fieldOption =>(\n                  <span>{fieldOption.label}</span>\n                ))\n              }\n            <Link to={`field-option/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.fieldOption.home.createLabel\" />\n          </Link>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"titleLabel\" for=\"title\">\n                <Translate contentKey=\"reactsterApp.field.title\">\n                  title\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"title\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"nameLabel\" for=\"name\">\n                <Translate contentKey=\"reactsterApp.field.name\">\n                  name\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"name\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n           \n            <AvGroup>\n              <Label for=\"form.id\">\n                <Translate contentKey=\"reactsterApp.field.form\">Form</Translate>\n              </Label>\n              { !this.props.match.params.formId ? \n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"form.id\"\n                onChange={this.formUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  forms.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              : null }\n              <AvInput type=\"number\"\n              readOnly\n                name=\"form.id\"\n                value={this.state.formId} />\n            </AvGroup>\n          </div>\n          <div>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </div>\n        </AvForm>\n      }\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  field: storeState.field.entity,\n  forms: storeState.field.forms,\n  loading: storeState.field.loading,\n  updating: storeState.field.updating,\n  fieldOptions: storeState.fieldOption.entities\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity, getFieldOptions };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-dialog.tsx","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input, Button } from 'reactstrap';\r\n// TODO import TextFormat only when fieldContainsDate\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Translate, translate, ICrudGetAction, ICrudPutAction, TextFormat } from 'react-jhipster';\r\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\r\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\r\n\r\nimport {\r\n    getforms,\r\n    getEntities as getFields\r\n} from './field.reducer';\r\n\r\nimport { \r\n    getEntity as getFormContent,\r\n    updateEntity as updateFormContent, \r\n    createEntity as createFormContent \r\n} from '../form-content/form-content.reducer';\r\n\r\nimport { \r\n    getEntity as getFieldValue,\r\n    getEntities as getFieldValues,\r\n    updateEntity as updateFieldValue, \r\n    createEntity as createFieldValue,\r\n    getformContents,\r\n    getfields\r\n} from '../field-value/field-value.reducer';\r\n\r\nimport FieldDetail from '../field/field-detail'\r\n\r\n // tslint:disable-next-line:no-unused-variable\r\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\r\n\r\nexport interface IFieldFormProps {\r\n  getFields: ICrudGetAction;\r\n  getFormContent: ICrudGetAction;\r\n  updateFormContent: ICrudPutAction;\r\n  createFormContent: ICrudPutAction;\r\n  getFieldValues: ICrudGetAction;\r\n  getFieldValue: ICrudGetAction;\r\n  updateFieldValue: ICrudPutAction;\r\n  createFieldValue: ICrudPutAction;\r\n  fields: any[];\r\n  fieldValues: any[];\r\n  getforms: ICrudGetAction;\r\n  match: any;\r\n  formId: number;\r\n  formContentId: number;\r\n  updating: boolean;\r\n  formContent: any;\r\n  forms: any[];\r\n  loading: boolean;\r\n  history: any;\r\n}\r\n\r\nexport interface IFieldFormState {\r\n    isNew: boolean;\r\n}\r\n\r\nexport class FieldForm extends React.Component<IFieldFormProps, IFieldFormState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNew: !this.props || !this.props.formContentId,\r\n        };\r\n    }\r\n  componentDidMount() {\r\n    this.props.getFields();\r\n    this.props.getforms();\r\n    this.props.getFieldValues();\r\n    !this.state.isNew && this.props.getFormContent((+this.props.formContentId));\r\n  }\r\n\r\n  saveFieldValues = async (values, formContent) => {\r\n    let fields =  this.props.fields.filter(field => field.form.id === formContent.form.id)\r\n    let fieldValues = []\r\n    for (let field of fields) {\r\n        let fieldValue = this.props.fieldValues.filter(fv => (fv.field.id === field.id && fv.formContent.id === this.props.formContent.id))[0]\r\n        if (fieldValue) {\r\n            let fieldValueBody = { id: fieldValue.id, field: {id: field.id}, formContent: {id: formContent.id}, value: values[field.name]}\r\n            await this.props.updateFieldValue(fieldValueBody)\r\n        } \r\n        else {\r\n            let fieldValueBody = { field: {id: field.id}, formContent: {id: formContent.id}, value: values[field.name]}\r\n            let fieldValue = await this.props.createFieldValue(fieldValueBody)\r\n        }\r\n        fieldValues.push(fieldValue)\r\n    }\r\n  }\r\n\r\n  saveEntity = async (event, errors, values) => {\r\n    if (this.state.isNew) {\r\n        let formContentBody = {form: {id: this.props.formId}}\r\n        let response = await this.props.createFormContent(formContentBody);\r\n        let formContent = response.value.data\r\n        await this.saveFieldValues(values, formContent)\r\n        this.props.history.push(`/form-content/${formContent.id}`);\r\n    } else {\r\n        await this.saveFieldValues(values, this.props.formContent )\r\n        this.props.history.push(`/form-content/${this.props.formContent.id}`);\r\n    }\r\n   \r\n  }\r\n\r\n  render() {\r\n    const isInvalid = false;\r\n    const { formContent, forms, loading, updating } = this.props;\r\n    const formContentId = this.props.formContentId ? +this.props.formContentId : 0\r\n    const formId = this.props.formId ? +this.props.formId : 0\r\n    const fields = formId ?  this.props.fields.filter(field => field.form.id === formId) : [];\r\n    const fieldValues = formContentId ? this.props.fieldValues.filter(fieldValue => fieldValue.formContent.id === formContentId) : []\r\n    const match = formId ? { url: '/field'} : this.props.match;\r\n    const { isNew } = this.state;\r\n    const findFieldValue = field => {\r\n        for (let fieldValue of fieldValues) {\r\n            if (fieldValue.field.id === field.id) {\r\n                return fieldValue.value;\r\n            }\r\n        }\r\n    }\r\n    return (\r\n      <div> \r\n        <AvForm model={isNew ? {} : formContent} onSubmit={this.saveEntity}>\r\n            {\r\n                fields.map((field, i) => (\r\n                    <FieldDetail Entity={field} \r\n                                key={i.toString()} \r\n                                fieldKey={i.toString()} \r\n                                fieldValue={findFieldValue(field)} >\r\n                    </FieldDetail>\r\n                ))\r\n            }\r\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\r\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\r\n            </Button>\r\n        </AvForm>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = storeState => ({\r\n  fields: storeState.field.entities,\r\n  fieldValues: storeState.fieldValue.entities,\r\n  formContent: storeState.formContent.entity\r\n});\r\n\r\nconst mapDispatchToProps = { \r\n    getforms, \r\n    getFields, \r\n    getFieldValues, \r\n    createFormContent, \r\n    getFormContent, \r\n    updateFormContent, \r\n    createFieldValue,\r\n    updateFieldValue \r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldForm);\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-form.tsx","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../reducers/action-type.util';\nimport { messages, SERVER_API_URL } from '../../config/constants';\n\n// import { Field } from './field.model';\n\nexport const ACTION_TYPES = {\n  FETCH_FIELDS: 'field/FETCH_FIELDS',\n  FETCH_forms: 'forms/FETCH_forms',\n  FETCH_FIELD:  'field/FETCH_FIELD',\n  CREATE_FIELD: 'field/CREATE_FIELD',\n  UPDATE_FIELD: 'field/UPDATE_FIELD',\n  DELETE_FIELD: 'field/DELETE_FIELD'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [],\n  entity: {},\n  forms: [],\n  updating: false,\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_forms):\n    case REQUEST(ACTION_TYPES.FETCH_FIELDS):\n    case REQUEST(ACTION_TYPES.FETCH_FIELD):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_FIELD):\n    case REQUEST(ACTION_TYPES.UPDATE_FIELD):\n    case REQUEST(ACTION_TYPES.DELETE_FIELD):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_forms):\n    case FAILURE(ACTION_TYPES.FETCH_FIELDS):\n    case FAILURE(ACTION_TYPES.FETCH_FIELD):\n    case FAILURE(ACTION_TYPES.CREATE_FIELD):\n    case FAILURE(ACTION_TYPES.UPDATE_FIELD):\n    case FAILURE(ACTION_TYPES.DELETE_FIELD):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_forms):\n      return {\n        ...state,\n        loading: false,\n        forms: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELDS):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FIELD):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_FIELD):\n    case SUCCESS(ACTION_TYPES.UPDATE_FIELD):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_FIELD):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/fields';\n\n// Actions\n\nexport const getforms: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_forms,\n  payload: axios.get(`/api/forms?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntities: ICrudGetAction = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_FIELDS,\n  payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_FIELD,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_FIELD,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_FIELD,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_FIELD,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field.reducer.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\n\nimport {\n  getforms,\n  getEntities\n} from './field.reducer';\n // tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFieldProps {\n  getEntities: ICrudGetAction;\n  fields: any[];\n  getforms: ICrudGetAction;\n  match: any;\n}\n\nexport class Field extends React.Component<IFieldProps> {\n  componentDidMount() {\n    this.props.getEntities();\n    this.props.getforms();\n  }\n\n  render() {\n    const formId = this.props.match.params.id ? +this.props.match.params.id : 0\n    const fields = formId ?  this.props.fields.filter(field => field.form.id === formId) : this.props.fields;\n    const match = formId ? { url: '/field'} : this.props.match;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.field.home.title\">Fields</Translate>\n          <Link to={`field/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.field.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th><Translate contentKey=\"global.field.id\">ID</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.field.type\">Type</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.field.title\">Title</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.field.name\">Name</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.field.form\">Form</Translate></th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n                fields.map((field, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${field.id}`} color=\"link\" size=\"sm\">\n                      {field.id}\n                    </Button>\n                  </td>\n                  <td>\n                    {field.type}\n                  </td>\n                  <td>\n                    {field.title}\n                  </td>\n                  <td>\n                    {field.name}\n                  </td>\n                  <td>\n                    {field.form ?\n                    <Link to={`form/${field.form.id}`}>\n                      {field.form.id}\n                    </Link> : ''}\n                  </td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${field.id}`} color=\"info\" size=\"sm\">\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`field/${field.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${field.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fields: storeState.field.entities\n});\n\nconst mapDispatchToProps = { getforms, getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Field);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field.tsx","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport Field from './field';\nimport FieldDetail from './field-detail';\nimport FieldDialog from './field-dialog';\nimport FieldDeleteDialog from './field-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={Field} />\n      <Route exact path={`${match.url}/new`} component={FieldDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} component={FieldDeleteDialog} />\n      <Route exact path={`${match.url}/:id/edit`} component={FieldDialog} />\n      <Route exact path={`${match.url}/:id`} component={FieldDetail} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getEntity, deleteEntity } from './form-content.reducer';\n\nexport interface IFormContentDeleteDialogProps {\n  getEntity: ICrudGetAction;\n  deleteEntity: ICrudDeleteAction;\n  formContent: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFormContentDeleteDialogState {\n  showModal: boolean;\n}\nexport class FormContentDeleteDialog extends React.Component<IFormContentDeleteDialogProps, IFormContentDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteEntity(this.props.formContent.id);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/form-content');\n  }\n\n  render() {\n    const { formContent } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"reactsterApp.formContent.delete.question\" interpolate={{ id: formContent.id }}>\n            Are you sure you want to delete this FormContent?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    formContent: storeState.formContent.entity\n});\n\nconst mapDispatchToProps = { getEntity, deleteEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContentDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/form-content-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './form-content.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\nimport { getEntities as getFieldValues } from '../field-value/field-value.reducer';\nimport FieldValueDetail from '../field-value/field-value-detail';\n\nexport interface IFormContentDetailProps {\n  getEntity: ICrudGetAction;\n  getFieldValues: ICrudGetAction;\n  formContent: any;\n  match: any;\n  fieldValues: any[];\n}\n\nexport class FormContentDetail extends React.Component<IFormContentDetailProps> {\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n    this.props.getFieldValues();\n  }\n\n  render() {\n    const { formContent } = this.props;\n    const fieldValues = this.props.fieldValues.filter(fieldValue => fieldValue.formContent.id === formContent.id) \n\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.formContent.detail.title\">FormContent</Translate> [<b>{formContent.id}</b>]\n        </h2>\n        <dl className=\"row-md jh-entity-details\">\n          <dt>\n            <Translate contentKey=\"reactsterApp.formContent.form\">\n              Form\n            </Translate>\n          </dt>\n          <dd>\n              {(formContent.form) ? formContent.form.id : ''}\n              {\n                fieldValues.map((fieldValue, i) => (\n                  <FieldValueDetail key={i.toString()} Entity={fieldValue} />\n                ))\n              }\n          </dd>\n        </dl>\n        <Button tag={Link} to={`/form-content/${formContent.id}/edit`} replace color=\"info\">\n          <FaArrowLeft/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.edit\">Edit</Translate></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    formContent: storeState.formContent.entity,\n    fieldValues: storeState.fieldValue.entities\n});\n\nconst mapDispatchToProps = { getEntity, getFieldValues };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContentDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/form-content-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './form-content.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\nimport FieldForm from '../field/field-form';\n\nexport interface IFormContentDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  formContent: any;\n  forms: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFormContentDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  formId: number;\n}\n\nexport class FormContentDialog extends React.Component<IFormContentDialogProps, IFormContentDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew: !this.props.match.params || !this.props.match.params.id,\n      formId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/form-content');\n  }\n\n  formUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.forms) {\n        if (id.toString() === this.props.forms[i].id.toString()) {\n            this.setState({\n                formId: this.props.forms[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { formContent, forms, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <div>\n      <div >\n        <Translate contentKey=\"reactsterApp.formContent.home.createOrEditLabel\">Create or edit a FormContent</Translate>\n      </div>\n      { isNew ? \n       <AvForm model={isNew ? {} : formContent} onSubmit={this.saveEntity} >\n          <div>\n            { formContent.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label for=\"form.id\">\n                <Translate contentKey=\"reactsterApp.formContent.form\">Form</Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"form.id\"\n                onChange={this.formUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  forms.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              <AvInput type=\"hidden\"\n                name=\"form.id\"\n                value={this.state.formId} />\n            </AvGroup>\n          </div>\n          <div>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </div>\n        </AvForm>\n        : null\n      }\n     {formContent.form && !isNew ? \n     <FieldForm history={this.props.history} formId={formContent.form.id} formContentId={this.props.match.params.id}/>\n    : null} \n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  formContent: storeState.formContent.entity,\n  forms: storeState.formContent.forms,\n  loading: storeState.formContent.loading,\n  updating: storeState.formContent.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContentDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/form-content-dialog.tsx","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../reducers/action-type.util';\nimport { messages, SERVER_API_URL } from '../../config/constants';\n\n// import { FormContent } from './form-content.model';\n\nexport const ACTION_TYPES = {\n  FETCH_FORMCONTENTS: 'formContent/FETCH_FORMCONTENTS',\n  FETCH_forms: 'forms/FETCH_forms',\n  FETCH_FORMCONTENT:  'formContent/FETCH_FORMCONTENT',\n  CREATE_FORMCONTENT: 'formContent/CREATE_FORMCONTENT',\n  UPDATE_FORMCONTENT: 'formContent/UPDATE_FORMCONTENT',\n  DELETE_FORMCONTENT: 'formContent/DELETE_FORMCONTENT'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [],\n  entity: {},\n  forms: [],\n  updating: false,\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_forms):\n    case REQUEST(ACTION_TYPES.FETCH_FORMCONTENTS):\n    case REQUEST(ACTION_TYPES.FETCH_FORMCONTENT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_FORMCONTENT):\n    case REQUEST(ACTION_TYPES.UPDATE_FORMCONTENT):\n    case REQUEST(ACTION_TYPES.DELETE_FORMCONTENT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_forms):\n    case FAILURE(ACTION_TYPES.FETCH_FORMCONTENTS):\n    case FAILURE(ACTION_TYPES.FETCH_FORMCONTENT):\n    case FAILURE(ACTION_TYPES.CREATE_FORMCONTENT):\n    case FAILURE(ACTION_TYPES.UPDATE_FORMCONTENT):\n    case FAILURE(ACTION_TYPES.DELETE_FORMCONTENT):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_forms):\n      return {\n        ...state,\n        loading: false,\n        forms: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FORMCONTENTS):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FORMCONTENT):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_FORMCONTENT):\n    case SUCCESS(ACTION_TYPES.UPDATE_FORMCONTENT):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_FORMCONTENT):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/form-contents';\n\n// Actions\n\nexport const getforms: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_forms,\n  payload: axios.get(`/api/forms?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntities: ICrudGetAction = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_FORMCONTENTS,\n  payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_FORMCONTENT,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_FORMCONTENT,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_FORMCONTENT,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_FORMCONTENT,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/form-content.reducer.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\n\nimport {\n  getforms,\n  getEntities\n} from './form-content.reducer';\n // tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFormContentProps {\n  getEntities: ICrudGetAction;\n  formContents: any[];\n  getforms: ICrudGetAction;\n  match: any;\n}\n\nexport class FormContent extends React.Component<IFormContentProps> {\n  componentDidMount() {\n    this.props.getEntities();\n    this.props.getforms();\n  }\n\n  render() {\n    const { formContents, match } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.formContent.home.title\">Form Contents</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.formContent.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th><Translate contentKey=\"global.field.id\">ID</Translate></th>\n                <th><Translate contentKey=\"reactsterApp.formContent.form\">Form</Translate></th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n                formContents.map((formContent, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${formContent.id}`} color=\"link\" size=\"sm\">\n                      {formContent.id}\n                    </Button>\n                  </td>\n                  <td>\n                    {formContent.form ?\n                    <Link to={`form/${formContent.form.id}`}>\n                      {formContent.form.id}\n                    </Link> : ''}\n                  </td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${formContent.id}`} color=\"info\" size=\"sm\">\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${formContent.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${formContent.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  formContents: storeState.formContent.entities\n});\n\nconst mapDispatchToProps = { getforms, getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContent);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/form-content.tsx","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport FormContent from './form-content';\nimport FormContentDetail from './form-content-detail';\nimport FormContentDialog from './form-content-dialog';\nimport FormContentDeleteDialog from './form-content-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={FormContent} />\n      <Route exact path={`${match.url}/new`} component={FormContentDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} component={FormContentDeleteDialog} />\n      <Route exact path={`${match.url}/:id/edit`} component={FormContentDialog} />\n      <Route exact path={`${match.url}/:id`} component={FormContentDetail} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form-content/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getEntity, deleteEntity } from './form.reducer';\n\nexport interface IFormDeleteDialogProps {\n  getEntity: ICrudGetAction;\n  deleteEntity: ICrudDeleteAction;\n  form: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFormDeleteDialogState {\n  showModal: boolean;\n}\nexport class FormDeleteDialog extends React.Component<IFormDeleteDialogProps, IFormDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteEntity(this.props.form.id);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/form');\n  }\n\n  render() {\n    const { form } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"reactsterApp.form.delete.question\" interpolate={{ id: form.id }}>\n            Are you sure you want to delete this Form?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    form: storeState.form.entity\n});\n\nconst mapDispatchToProps = { getEntity, deleteEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/form-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './form.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\nimport FieldForm from '../field/field-form';\n\nexport interface IFormDetailProps {\n  getEntity: ICrudGetAction;\n  form: any;\n  match: any;\n  history: any;\n}\n\nexport class FormDetail extends React.Component<IFormDetailProps> {\n\n  componentDidMount() {\n    this.props.getEntity(this.props.match.params.id);\n  }\n\n  render() {\n    const { form } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.form.detail.title\">Form</Translate> [<b>{form.id}</b>]\n        </h2>\n        <dl className=\"row-md jh-entity-details\">\n        <FieldForm history={this.props.history}  formId={this.props.match.params.id}/>\n        </dl>  \n        <Button tag={Link} to=\"/form\" replace color=\"info\">\n          <FaArrowLeft/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.back\">Back</Translate></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    form: storeState.form.entity\n});\n\nconst mapDispatchToProps = { getEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/form-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './form.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\nimport Field from '../field/field';\n\nexport interface IFormDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  form: any;\n  match: any;\n  history: any;\n}\n\nexport interface IFormDialogState {\n  showModal: boolean;\n  isNew: boolean;\n}\n\nexport class FormDialog extends React.Component<IFormDialogProps, IFormDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew: !this.props.match.params || !this.props.match.params.id,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/form');\n  }\n\n  render() {\n    const isInvalid = false;\n    const { form, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <div  >\n      <div  >\n        <Translate contentKey=\"reactsterApp.form.home.createOrEditLabel\">Create or edit a Form</Translate>\n      </div>\n      { loading ? <p>Loading...</p>\n      : <div>\n        <AvForm model={isNew ? {} : form} onSubmit={this.saveEntity} >\n          \n            { form.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n          \n          <div>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </div>\n        </AvForm>\n        { this.state.isNew ? null :\n        <Field match={this.props.match}/>\n        }\n        </div>\n      }\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  form: storeState.form.entity,\n  loading: storeState.form.loading,\n  updating: storeState.form.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/form-dialog.tsx","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from '../../reducers/action-type.util';\nimport { messages, SERVER_API_URL } from '../../config/constants';\n\n// import { Form } from './form.model';\n\nexport const ACTION_TYPES = {\n  FETCH_FORMS: 'form/FETCH_FORMS',\n  FETCH_FORM:  'form/FETCH_FORM',\n  CREATE_FORM: 'form/CREATE_FORM',\n  UPDATE_FORM: 'form/UPDATE_FORM',\n  DELETE_FORM: 'form/DELETE_FORM'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [],\n  entity: {},\n  updating: false,\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_FORMS):\n    case REQUEST(ACTION_TYPES.FETCH_FORM):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_FORM):\n    case REQUEST(ACTION_TYPES.UPDATE_FORM):\n    case REQUEST(ACTION_TYPES.DELETE_FORM):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_FORMS):\n    case FAILURE(ACTION_TYPES.FETCH_FORM):\n    case FAILURE(ACTION_TYPES.CREATE_FORM):\n    case FAILURE(ACTION_TYPES.UPDATE_FORM):\n    case FAILURE(ACTION_TYPES.DELETE_FORM):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FORMS):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_FORM):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_FORM):\n    case SUCCESS(ACTION_TYPES.UPDATE_FORM):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_FORM):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = SERVER_API_URL + '/api/forms';\n\n// Actions\n\nexport const getEntities: ICrudGetAction = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_FORMS,\n  payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_FORM,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_FORM,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_FORM,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, entity)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_FORM,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/form.reducer.ts","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaTrash } from 'react-icons/lib/fa';\n\nimport {\n  getEntities\n} from './form.reducer';\n // tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\n\nexport interface IFormProps {\n  getEntities: ICrudGetAction;\n  forms: any[];\n  match: any;\n}\n\nexport class Form extends React.Component<IFormProps> {\n  componentDidMount() {\n    this.props.getEntities();\n  }\n\n  render() {\n    const { forms, match } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"reactsterApp.form.home.title\">Forms</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.form.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th><Translate contentKey=\"global.field.id\">ID</Translate></th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n                forms.map((form, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${form.id}`} color=\"link\" size=\"sm\">\n                      {form.id}\n                    </Button>\n                  </td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${form.id}`} color=\"info\" size=\"sm\">\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${form.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${form.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  forms: storeState.form.entities\n});\n\nconst mapDispatchToProps = { getEntities };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/form.tsx","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport Form from './form';\nimport FormDetail from './form-detail';\nimport FormDialog from './form-dialog';\nimport FormDeleteDialog from './form-delete-dialog';\nimport FieldDialog from '../field/field-dialog';\nimport FieldOptionDialog from '../field-option/field-option-dialog';\n\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={Form} />\n      <Route exact path={`${match.url}/new`} component={FormDialog} />\n      <Route exact path={`${match.url}/:formId/field/new`} component={FieldDialog} />\n      <Route exact path={`${match.url}/:formId/field/:id/edit`} component={FieldDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:id/delete`} component={FormDeleteDialog} />\n      <Route exact path={`${match.url}/:id/edit`} component={FormDialog} />\n      <Route exact path={`${match.url}/:id`} component={FormDetail} />\n      <ModalRoute exact parentPath={`${match.url}/:formId/field/:fieldId/edit`} path={`${match.url}/:formId/field/:fieldId/field-option/new`} component={FieldOptionDialog} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/form/index.tsx","import * as React from 'react';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport Field from './field';\r\nimport Form from './form';\r\nimport FormContent from './form-content';\r\nimport FieldValue from './field-value';\r\nimport FieldOption from './field-option';\n/* jhipster-needle-add-route-import - JHipster will add routes here */\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <Switch>\r\n      <Route path={'/field'} component={Field}/>\r\n      <Route path={'/form'} component={Form}/>\r\n      <Route path={'/form-content'} component={FormContent}/>\r\n      <Route path={'/field-value'} component={FieldValue}/>\r\n      <Route path={'/field-option'} component={FieldOption}/>\n      {/* jhipster-needle-add-route-path - JHipster will routes here */}\r\n    </Switch>\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/index.tsx","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { AppContainer } from 'react-hot-loader';\n\nimport DevTools from './config/devtools';\nimport initStore from './config/store';\nimport { registerLocales } from './config/translation';\nimport setupAxiosInterceptors from './config/axios-interceptor';\nimport { clearAuthentication } from './reducers/authentication';\nimport AppComponent from './app';\n\nconst devTools = process.env.NODE_ENV === 'development' ? <DevTools /> : null;\n\nconst store = initStore();\nregisterLocales(store);\n\nconst actions = bindActionCreators({ clearAuthentication }, store.dispatch);\nsetupAxiosInterceptors(() => actions.clearAuthentication('login.error.unauthorized'));\n\nconst rootEl = document.getElementById('root');\n\nconst render = Component =>\n  ReactDOM.render(\n    <AppContainer>\n      <Provider store={store}>\n        <div>\n          {/* If this slows down the app in dev disable it and enable when required  */}\n          {devTools}\n          <Component/>\n        </div>\n      </Provider>\n    </AppContainer>,\n    rootEl\n  );\n\nrender(AppComponent);\n\n// This is quite unstable\n// if (module.hot) {\n//   module.hot.accept('./app', () => {\n//     const NextApp = require<{ default: typeof AppComponent }>('./app').default;\n//     render(NextApp);\n//   });\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/index.tsx","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Settings from './settings/settings';\nimport Password from './password/password';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Route path={`${match.url}/settings`} component={Settings}/>\n    <Route path={`${match.url}/password`} component={Password}/>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/account/index.tsx","/* eslint-disable */ // TODO Fix when page is completed\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nimport { getSession } from '../../../reducers/authentication';\nimport { savePassword } from '../../../reducers/account';\n\nexport interface IUserSettingsProps {\n  account: any;\n  getSession: Function;\n}\n\nexport interface IUserSettingsState {\n  account: any;\n  firstPassword: string;\n  secondPassword: string;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: props.account,\n      firstPassword: null,\n      secondPassword: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      account: nextProps.account\n    });\n  }\n\n  setFirstAccountPassword = event => {\n    this.setState({\n      firstPassword: event.target.value\n    });\n  }\n\n  setSecondAccountPassword = event => {\n    this.setState({\n      secondPassword: event.target.value\n    });\n  }\n\n  savePassword = event => {\n    if (this.state.firstPassword === this.state.secondPassword) {\n      savePassword(this.state.firstPassword);\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    const { account } = this.state;\n    return (\n        <div>\n          <h2>Password for [{account.login}]</h2>\n          <Form>\n            <FormGroup>\n              <Label>New password</Label>\n              <Input type=\"password\" className=\"form-control\" id=\"firstName\" name=\"firstName\" placeholder=\"New password\"\n                     onChange={this.setFirstAccountPassword} />\n            </FormGroup>\n            <FormGroup>\n              <Label>New password confirmation</Label>\n              <Input type=\"password\" className=\"form-control\" id=\"lastName\" name=\"lastName\" placeholder=\"Confirm the new password\" onChange={this.setSecondAccountPassword}/>\n            </FormGroup>\n             <Button type=\"submit\" color=\"success\" onClick={this.savePassword}>Save</Button>\n          </Form>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  account: storeState.authentication.account,\n  isAuthenticated: storeState.authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, savePassword };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/account/password/password.tsx","/* eslint-disable */ // TODO Fix when page is completed\nimport * as React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { locales } from '../../../config/translation';\n\nimport { getSession } from '../../../reducers/authentication';\nimport { saveAccountSettings } from '../../../reducers/account';\n\nexport interface IUserSettingsProps {\n  account: any;\n  getSession: Function;\n}\n\nexport interface IUserSettingsState {\n  account: any;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: props.account\n    };\n  }\n\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      account: nextProps.account\n    });\n  }\n\n  setFirstName = event => {\n    this.setState({\n      account: {\n        ...this.state.account,\n        firstName: event.target.value\n      }\n    });\n  }\n\n  setLastName = event => {\n    this.setState({\n      account: {\n        ...this.state.account,\n        lastName: event.target.value\n      }\n    });\n  }\n\n  setEmail = event => {\n    this.setState({\n      account: {\n        ...this.state.account,\n        email: event.target.value\n      }\n    });\n  }\n\n  saveSettings = event => {\n    saveAccountSettings(this.state.account);\n    event.preventDefault();\n  }\n\n  render() {\n    const { account } = this.state;\n    return (\n        <div>\n          <h2>User settings for [{account.login}]</h2>\n          <Form>\n            {/* TODO: change to Availity form components */}\n            <FormGroup>\n              <Label for=\"firstName\">First Name</Label>\n              <Input type=\"text\" className=\"form-control\" value={account.firstName} id=\"firstName\" name=\"firstName\" placeholder=\"First Name\"\n              onChange={this.setFirstName}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"lastName\">Last Name</Label>\n              <Input type=\"text\" className=\"form-control\" value={account.lastName} id=\"lastName\" name=\"lastName\" placeholder=\"Last Name\"\n              onChange={this.setLastName}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"email\">Email</Label>\n              <Input type=\"text\" className=\"form-control\" value={account.email} id=\"email\" name=\"email\" placeholder=\"Email\"\n              onChange={this.setEmail}/>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"langKey\">Language</Label>\n              <Input type=\"select\" id=\"langKey\" name=\"langKey\" className=\"form-control\">\n                {locales.map(lang => <option value={lang} key={lang}>{lang}</option>)}\n              </Input>\n            </FormGroup>\n            <Button type=\"submit\" color=\"success\" onClick={this.saveSettings}>Save</Button>\n          </Form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  account: storeState.authentication.account,\n  isAuthenticated: storeState.authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/account/settings/settings.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Table } from 'reactstrap';\n\nimport { getAudits } from '../../../reducers/administration';\n\nexport interface IAuditsPageProps {\n  isFetching?: boolean;\n  audits: any[];\n  getAudits: Function;\n}\n\nexport class AuditsPage extends React.Component<IAuditsPageProps, undefined> {\n\n  componentDidMount() {\n    this.props.getAudits();\n  }\n\n  getAuditList = () => {\n    if (!this.props.isFetching) {\n      this.props.getAudits();\n    }\n  }\n\n  render() {\n    const { audits } = this.props;\n    return (\n      <div>\n          <h2>Audits</h2>\n          FIX ME pagination and filter by date and sorting\n          <hr/>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Table>\n                <thead>\n                  <tr>\n                    <th>Timestamp</th>\n                    <th>Principal</th>\n                    <th>Address</th>\n                    <th>Type</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {audits.map((row, index) => (\n                    <tr key={index}>\n                      <tr>{row.timestamp}</tr>\n                      <tr>{row.principal}</tr>\n                      <tr>{row.data.remoteAddress}</tr>\n                      <tr>{row.type}</tr>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  ({ administration }) => ({ audits: administration.audits, isFetching: administration.isFetching }),\n  { getAudits }\n)(AuditsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/audits/audits.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Input } from 'reactstrap';\nimport { Translate } from 'react-jhipster';\nimport { sortBy, reverse } from 'lodash';\n\nimport { getConfigurations, getEnv } from '../../../reducers/administration';\n\nexport interface IConfigurationPageProps {\n  isFetching?: boolean;\n  getConfigurations: Function;\n  getEnv: Function;\n  configuration: any;\n}\n\nexport interface IConfigurationPageState {\n  filter: string;\n  reversePrefix: boolean;\n  reverseProperties: boolean;\n}\n\nexport class ConfigurationPage extends React.Component<IConfigurationPageProps, IConfigurationPageState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: '',\n      reversePrefix: false,\n      reverseProperties: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.getConfigurations();\n    this.props.getEnv();\n  }\n\n  getConfigurationList = () => {\n    if (!this.props.isFetching) {\n      this.props.getConfigurations();\n      this.props.getEnv();\n    }\n  }\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  }\n\n  filterFn = prefix => prefix.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  sortPrefix = (configProps, rev) => {\n    const { configuration } = this.props;\n    if (configuration && configuration.configProps) {\n      const listSorted = sortBy(configProps, [ prop => configuration.configProps[prop].prefix ]);\n      return rev ? reverse(listSorted) : listSorted;\n    }\n  }\n\n  sortProperties = (configProps, rev) => {\n    const { configuration } = this.props;\n    if (configuration && configuration.configProps) {\n      const listSorted = sortBy(configProps);\n      return rev ? reverse(listSorted) : listSorted;\n    }\n  }\n\n  reversePrefix = () => {\n    this.setState({\n      reversePrefix: !this.state.reversePrefix\n    });\n  }\n\n  reverseProperties = () => {\n    this.setState({\n      reverseProperties: !this.state.reverseProperties\n    });\n  }\n\n  render() {\n    const { configuration } = this.props;\n    const { filter, reversePrefix, reverseProperties } = this.state;\n    const configProps = (configuration && configuration.configProps) ? configuration.configProps : {};\n    const env = (configuration && configuration.env) ? configuration.env : {};\n    return (\n        <div>\n          <h2><Translate contentKey=\"configuration.title\">Configuration</Translate></h2>\n          <span>\n            <Translate contentKey=\"configuration.filter\">Filter</Translate>\n          </span> <Input type=\"search\" value={filter} onChange={this.setFilter} name=\"search\" id=\"search\" />\n          <label>Spring configuration</label>\n          <Table className=\"table table-striped table-bordered table-responsive d-table\">\n            <thead>\n              <tr>\n                <th onClick={this.reversePrefix}><Translate contentKey=\"configuration.table.prefix\">Prefix</Translate></th>\n                <th onClick={this.reverseProperties}><Translate contentKey=\"configuration.table.properties\">Properties</Translate></th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.sortPrefix(Object.keys(configProps), reversePrefix).filter(this.filterFn).map((configPropKey, configPropIndex) => (\n                <tr key={configPropIndex}>\n                  <td><span>{configProps[configPropKey].prefix}</span></td>\n                  <td>\n                    {this.sortProperties(Object.keys(configProps[configPropKey].properties), reverseProperties).map((propKey, propIndex) => (\n                      <div key={propIndex} className=\"row\">\n                        <div className=\"col-md-4\">{propKey}</div>\n                        <div className=\"col-md-8\">\n                            <span className=\"float-right badge badge-secondary break\">{JSON.stringify(configProps[configPropKey].properties[propKey])}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          {Object.keys(env).map((envKey, envIndex) => (\n            <div key={envIndex}>\n              <label><span>{envKey}</span></label>\n              <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\n                <thead>\n                  <tr key={envIndex}>\n                    <th className=\"w-40\">Property</th>\n                    <th className=\"w-60\">Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {env[envKey] ?\n                    Object.keys(env[envKey]).filter(this.filterFn).map((propKey, propIndex) => (\n                      <tr key={propIndex}>\n                        <td className=\"break\">{propKey}</td>\n                        <td className=\"break\">\n                          <span className=\"float-right badge badge-secondary break\">\n                            {JSON.stringify(env[envKey][propKey])}\n                          </span>\n                        </td>\n                      </tr>\n                    ))\n                  : ''}\n                </tbody>\n              </Table>\n            </div>\n          ))}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }) => ({\n  configuration: administration.configuration,\n  isFetching: administration.isFetching\n});\n\nconst mapDispatchToProps = { getConfigurations, getEnv };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurationPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/configuration/configuration.tsx","import * as React from 'react';\n\nconst DocsPage = () => (\n  <div>\n    <iframe\n      src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\"\n      title=\"Swagger UI\" seamless style={{ border: 'none' }}\n    />\n  </div>\n);\n\nexport default DocsPage;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/docs/docs.tsx","import * as React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => (\n    <Modal\n      isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n      toggle={handleClose}\n    >\n    <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n    <ModalBody>\n      <Table bordered>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(healthObject).map((key, index) => (\n          <tr key={index}>\n            <td>{key}</td>\n            <td>{healthObject[key]}</td>\n          </tr>\n          ))}\n        </tbody>\n      </Table>\n    </ModalBody>\n    <ModalFooter>\n      <Button color=\"primary\" onClick={handleClose}>Close</Button>\n    </ModalFooter>\n  </Modal>\n);\n\nexport default HealthModal;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/health/health-modal.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table } from 'reactstrap';\nimport { FaEye, FaRefresh } from 'react-icons/lib/fa';\n\nimport HealthModal from './health-modal';\nimport { systemHealth } from '../../../reducers/administration';\n\nexport interface IHealthPageProps {\n  isFetching?: boolean;\n  systemHealth: Function;\n  health: any;\n  systemHealthInfo: any;\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, any> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      healthObject: {},\n      showModal: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  }\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n  }\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return (\n      <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />\n    );\n  }\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = health || {};\n    return (\n      <div>\n          <h2>Health Checks</h2>\n          <p>\n            <button type=\"button\" onClick={this.getSystemHealth} className={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n              <FaRefresh />&nbsp;\n              <Translate component=\"span\" contentKey=\"health.refresh.button\" />\n            </button>\n          </p>\n          <div className=\"row\">\n            <div className=\"col-12\">\n            <Table bordered>\n               <thead>\n                 <tr>\n                   <th>Service Name</th>\n                   <th>Status</th>\n                   <th>Details</th>\n                 </tr>\n               </thead>\n               <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                (configPropKey !== 'status') ?\n                  <tr key={configPropIndex}>\n                    <td>{configPropKey}</td>\n                    <td><button type=\"button\" className={data[configPropKey].status !== 'UP' ? 'btn btn-danger' : 'btn btn-success'}>{data[configPropKey].status}</button></td>\n                    <td><a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}><FaEye /></a></td>\n                  </tr>\n                : null\n                )}\n              </tbody>\n             </Table>\n            </div>\n          </div>\n          {this.renderModal()}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.isFetching\n});\n\nconst mapDispatchToProps = { systemHealth };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/health/health.tsx","import * as React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport UserManagement from './user-management';\nimport Logs from './logs/logs';\nimport Health from './health/health';\nimport Metrics from './metrics/metrics';\nimport Configuration from './configuration/configuration';\nimport Audits from './audits/audits';\nimport Docs from './docs/docs';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Route path={`${match.url}/user-management`} component={UserManagement} />\n    <Route exact path={`${match.url}/health`} component={Health} />\n    <Route exact path={`${match.url}/metrics`} component={Metrics} />\n    <Route exact path={`${match.url}/docs`} component={Docs} />\n    <Route exact path={`${match.url}/configuration`} component={Configuration} />\n    <Route exact path={`${match.url}/audits`} component={Audits} />\n    <Route exact path={`${match.url}/logs`} component={Logs} />\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../../../reducers/administration';\n\nexport interface ILogsPageProps {\n  isFetching?: boolean;\n  getLoggers: Function;\n  changeLogLevel: Function;\n  logs: any;\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, { filter: string }> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  }\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  }\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  }\n\n  getClassName = (level, check, className) => level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light';\n\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? logs.loggers : {};\n    return (\n        <div>\n          <h2><Translate contentKey=\"logs.title\">Logs</Translate></h2>\n          <p><Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>There are {loggers.length} loggers.</Translate></p>\n\n          <span><Translate contentKey=\"logs.filter\">Filter</Translate></span>\n          <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\n\n          <table className=\"table table-sm table-striped table-bordered\" >\n            <thead>\n              <tr title=\"click to order\">\n                <th><span><Translate contentKey=\"logs.table.name\">Name</Translate></span></th>\n                <th><span><Translate contentKey=\"logs.table.level\">Level</Translate></span></th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n              loggers.filter(this.filterFn).map((logger, i) =>\n                <tr key={`log-row-${i}`}>\n                  <td><small>{logger.name}</small></td>\n                  <td>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'TRACE')} className={this.getClassName(logger.level, 'TRACE', 'danger')}>TRACE</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'DEBUG')} className={this.getClassName(logger.level, 'DEBUG', 'warning')}>DEBUG</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'INFO')} className={this.getClassName(logger.level, 'INFO', 'info')}>INFO</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'WARN')} className={this.getClassName(logger.level, 'WARN', 'success')}>WARN</button>\n                    <button disabled={isFetching} onClick={this.changeLevel(logger.name, 'ERROR')} className={this.getClassName(logger.level, 'ERROR', 'primary')}>ERROR</button>\n                  </td>\n                </tr>\n              )\n            }\n            </tbody>\n          </table>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }) => ({\n  logs: administration.logs,\n  isFetching: administration.isFetching\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/logs/logs.tsx","import * as React from 'react';\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nconst MetricsModal = ({ handleClose, showModal, threadDump }) => (\n  <Modal\n    isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n    toggle={handleClose} className=\"modal-lg\"\n  >\n    <ModalHeader toggle={handleClose}>Thread Dump Info</ModalHeader>\n    <ModalBody>\n      {threadDump ? threadDump.map((threadDumpInfo, i) => (\n        <div key={`dump-${i}`}>\n          <h5>{threadDumpInfo.threadState} {threadDumpInfo.threadName} (ID {threadDumpInfo.threadId})</h5>\n          <div className=\"row\" >\n            <div className=\"col-xs-12\">\n              {Object.entries(threadDumpInfo.stackTrace).map(([ stK, stV ]) => (\n                <p key={`detail-${stK}`}>\n                  {stV.className}.{stV.methodName}\n                  ({stV.fileName}:{stV.lineNumber})\n                </p>\n              ))}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-xs-12\">\n              <Table responsive>\n                <thead>\n                  <tr>\n                    <th>Blocked Time</th>\n                    <th>Blocked Count</th>\n                    <th>Waited Time</th>\n                    <th>Waited Count</th>\n                    <th>Lock Name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr key={threadDumpInfo.lockName}>\n                    <td>{threadDumpInfo.blockedTime}</td>\n                    <td>{threadDumpInfo.blockedCount}</td>\n                    <td>{threadDumpInfo.waitedTime}</td>\n                    <td>{threadDumpInfo.waitedCount}</td>\n                    <td>{threadDumpInfo.lockName}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          </div>\n        </div>\n    )\n  ) : null }\n  </ModalBody>\n  <ModalFooter>\n    <Button color=\"primary\" onClick={handleClose}>Close</Button>\n  </ModalFooter>\n</Modal>);\n\nexport default MetricsModal;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/metrics/metrics-modal.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Progress } from 'reactstrap';\nimport { Translate, TextFormat } from 'react-jhipster';\nimport { FaEye, FaRefresh } from 'react-icons/lib/fa';\n\nimport MetricsModal from './metrics-modal';\nimport { systemMetrics, systemThreadDump } from '../../../reducers/administration';\nimport { APP_WHOLE_NUMBER_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT } from '../../../config/constants';\n\nexport interface IMetricsPageProps {\n  isFetching?: boolean;\n  systemMetrics: Function;\n  systemThreadDump: Function;\n  metrics: any;\n  threadDump: any;\n}\n\nexport class MetricsPage extends React.Component<any, any> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.systemMetrics();\n  }\n\n  getMetrics = () => {\n    if (!this.props.isFetching) {\n      this.props.systemMetrics();\n    }\n  }\n\n  getThreadDump = () => {\n    this.props.systemThreadDump();\n    this.setState({\n      showModal: true\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n  }\n\n  filterNaN = input => isNaN(input) ? 0 : input;\n\n  getStats = metrics => {\n    const stat = {\n      servicesStats: {},\n      cachesStats: {}\n    };\n    if (!this.props.isFetching && metrics && metrics.timers) {\n      Object.keys(metrics.timers).forEach((key, indexNm) => {\n        if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n          stat.servicesStats[key] = metrics.timers[key];\n        }\n        if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n          // remove gets or puts\n          const index = key.lastIndexOf('.');\n          const newKey = key.substr(0, index);\n          // Keep the name of the domain\n          stat.cachesStats[newKey] = {\n            name: newKey,\n            value: metrics.timers[key]\n          };\n        }\n      });\n\n    }\n    return stat;\n  }\n\n  renderModal = () => <MetricsModal handleClose={this.handleClose} showModal={this.state.showModal} threadDump={this.props.threadDump}/>;\n\n  renderGauges = metrics => (\n    <div className=\"row\">\n      <div className=\"col-sm-12\">\n        <h3>JVM Metrics</h3>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <b>Memory</b>\n            <p>\n              <span>Total Memory</span> (\n                <TextFormat\n                  value={metrics.gauges['jvm.memory.total.used'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M / <TextFormat\n                  value={metrics.gauges['jvm.memory.total.max'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M)\n            </p>\n            <Progress animated\n              value={metrics.gauges['jvm.memory.total.used'].value}\n              min=\"0\"\n              max={metrics.gauges['jvm.memory.total.max'].value}\n              color=\"success\"\n            >\n              <TextFormat\n                value={metrics.gauges['jvm.memory.total.used'].value * 100 / metrics.gauges['jvm.memory.total.max'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />%\n            </Progress>\n            <p>\n              <span>Heap Memory</span> (\n                <TextFormat\n                  value={metrics.gauges['jvm.memory.heap.used'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M / <TextFormat\n                  value={metrics.gauges['jvm.memory.heap.max'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M)\n            </p>\n            <Progress animated\n              min=\"0\"\n              max={metrics.gauges['jvm.memory.heap.max'].value}\n              value={metrics.gauges['jvm.memory.heap.used'].value}\n              color=\"success\"\n            >\n              <TextFormat\n                value={metrics.gauges['jvm.memory.heap.used'].value * 100 / metrics.gauges['jvm.memory.heap.max'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n\n            <p>\n              <span>Non-Heap Memory</span> (\n                <TextFormat\n                  value={metrics.gauges['jvm.memory.non-heap.used'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M / <TextFormat\n                  value={metrics.gauges['jvm.memory.non-heap.committed'].value / 1000000}\n                  type=\"number\"\n                  format={APP_WHOLE_NUMBER_FORMAT} />\n                M)\n            </p>\n            <Progress animated\n              min=\"0\"\n              max={metrics.gauges['jvm.memory.non-heap.committed'].value}\n              value={metrics.gauges['jvm.memory.non-heap.used'].value}\n              color=\"success\"\n            >\n              <TextFormat\n                value={metrics.gauges['jvm.memory.non-heap.used'].value * 100 / metrics.gauges['jvm.memory.non-heap.committed'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n          </div>\n          <div className=\"col-md-4\">\n            <b>Threads</b> (Total: {metrics.gauges['jvm.threads.count'].value}) <FaEye onClick={this.getThreadDump}/>\n            <p><span>Runnable</span> {metrics.gauges['jvm.threads.runnable.count'].value}</p>\n            <Progress animated min=\"0\" value={metrics.gauges['jvm.threads.runnable.count'].value} max={metrics.gauges['jvm.threads.count'].value} color=\"success\">\n              <TextFormat\n                value={metrics.gauges['jvm.threads.runnable.count'].value * 100 / metrics.gauges['jvm.threads.count'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n\n            <p><span>Timed Waiting</span> ({metrics.gauges['jvm.threads.timed_waiting.count'].value})</p>\n            <Progress animated min=\"0\" value={metrics.gauges['jvm.threads.timed_waiting.count'].value} max={metrics.gauges['jvm.threads.count'].value} color=\"warning\">\n              <TextFormat\n                value={metrics.gauges['jvm.threads.timed_waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n\n            <p><span>Waiting</span> ({metrics.gauges['jvm.threads.waiting.count'].value})</p>\n            <Progress animated min=\"0\" value={metrics.gauges['jvm.threads.waiting.count'].value} max={metrics.gauges['jvm.threads.count'].value} color=\"warning\">\n              <TextFormat\n                value={metrics.gauges['jvm.threads.waiting.count'].value * 100 / metrics.gauges['jvm.threads.count'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n\n            <p><span>Blocked</span> ({metrics.gauges['jvm.threads.blocked.count'].value})</p>\n            <Progress animated min=\"0\" value={metrics.gauges['jvm.threads.blocked.count'].value} max={metrics.gauges['jvm.threads.count'].value} color=\"success\">\n              <TextFormat\n                value={metrics.gauges['jvm.threads.blocked.count'].value * 100 / metrics.gauges['jvm.threads.count'].value}\n                type=\"number\"\n                format={APP_WHOLE_NUMBER_FORMAT} />\n              %\n            </Progress>\n          </div>\n          <div className=\"col-md-4\">\n            <b>Garbage collections</b>\n            <div className=\"row\">\n              <div className=\"col-md-9\">Mark Sweep count</div>\n              <div className=\"col-md-3 text-right\">{metrics.gauges['jvm.garbage.PS-MarkSweep.count'].value}</div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-9\">Mark Sweep time</div>\n              <div className=\"col-md-3 text-right\">{metrics.gauges['jvm.garbage.PS-MarkSweep.time'].value}ms</div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-9\">Scavenge count</div>\n              <div className=\"col-md-3 text-right\">{metrics.gauges['jvm.garbage.PS-Scavenge.count'].value}</div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-9\">Scavenge time</div>\n              <div className=\"col-md-3 text-right\">{metrics.gauges['jvm.garbage.PS-Scavenge.time'].value}ms</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    )\n\n  render() {\n    const { metrics, isFetching } = this.props;\n    const data = metrics || {};\n    const { servicesStats, cachesStats } = this.getStats(data);\n    return (\n        <div>\n          <h2>Application Metrics</h2>\n          <p>\n            <button type=\"button\" onClick={this.getMetrics} className={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\n              <FaRefresh/>&nbsp;\n              <Translate component=\"span\" contentKey=\"health.refresh.button\" />\n            </button>\n          </p>\n          <hr />\n          {metrics.gauges ? this.renderGauges(metrics) : ''}\n\n          { metrics.meters && metrics.timers ?\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <h3>HTTP requests (events per second)</h3>\n                <p>\n                  <span>Active requests:</span> <b>\n                    <TextFormat\n                      value={metrics.counters['com.codahale.metrics.servlet.InstrumentedFilter.activeRequests'].count}\n                      type=\"number\"\n                      format={APP_WHOLE_NUMBER_FORMAT} />\n                  </b> - <span>Total requests:</span> <b>\n                    <TextFormat\n                      value={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\n                      type=\"number\"\n                      format={APP_WHOLE_NUMBER_FORMAT} />\n                  </b>\n                </p>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>Code</th>\n                      <th>Count</th>\n                      <th className=\"text-right\">Mean</th>\n                      <th className=\"text-right\"><span>Average</span> (1 min)</th>\n                      <th className=\"text-right\"><span>Average</span> (5 min)</th>\n                      <th className=\"text-right\"><span>Average</span> (15 min)</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr key={0}>\n                      <td>OK</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\n                          value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].mean_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m1_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m5_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok'].m15_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                    <tr key={1}>\n                      <td>Not Found</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\n                          value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].mean_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m1_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m5_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound'].m15_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                    <tr key={2}>\n                      <td>Server Error</td>\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.timers['com.codahale.metrics.servlet.InstrumentedFilter.requests'].count}\n                          value={metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].count}\n                          color=\"success\"\n                          animated\n                        />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].mean_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m1_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m5_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.meters['com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError'].m15_rate)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </div>\n            </div>\n          : ''}\n          { servicesStats ?\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <h3>Services statistics (time in millisecond)</h3>\n            </div>\n            <Table>\n              <thead>\n                <tr>\n                  <th>Service name</th>\n                  <th>Count</th>\n                  <th>Mean</th>\n                  <th>Min</th>\n                  <th>p50</th>\n                  <th>p75</th>\n                  <th>p95</th>\n                  <th>p99</th>\n                  <th>Max</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(servicesStats).map((key, index) => (\n                  <tr key={key}>\n                    <td>{key}</td>\n                    <td>{servicesStats[key].count}</td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].mean * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].min * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p50 * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p75 * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p95 * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].p99 * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                    <td>\n                      <TextFormat\n                        value={servicesStats[key].max * 1000}\n                        type=\"number\"\n                        format={APP_WHOLE_NUMBER_FORMAT} />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n          : ''}\n\n          { cachesStats ?\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <h3>Ehcache statistics</h3>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>Cache Name</th>\n                      <th>Object</th>\n                      <th>Misses</th>\n                      <th>Eviction Count</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Object.keys(cachesStats).map((k, v) => (\n                      <tr key={k}>\n                        <td>{k}</td>\n                        <td>{metrics.gauges[`${k}.objects`].value}</td>\n                        <td>{metrics.gauges[`${k}.hits`].value}</td>\n                        <td>{metrics.gauges[`${k}.misses`].value}</td>\n                        <td>{metrics.gauges[`${k}.eviction-count`].value}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n\n              </div>\n            </div>\n          : ''}\n\n          { metrics.gauges && metrics.gauges['HikariPool-1.pool.TotalConnections'].value > 0 ?\n            <div className=\"row\">\n              <div className=\"col-sm-12\">\n                <h3>DataSource statistics (time in millisecond)</h3>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <span>Usage</span>\n                        ({metrics.gauges['HikariPool-1.pool.ActiveConnections'].value} / {metrics.gauges['HikariPool-1.pool.TotalConnections'].value})\n                      </th>\n                      <th className=\"text-right\">Count</th>\n                      <th className=\"text-right\">Mean</th>\n                      <th className=\"text-right\">Min</th>\n                      <th className=\"text-right\">p50</th>\n                      <th className=\"text-right\">p75</th>\n                      <th className=\"text-right\">p95</th>\n                      <th className=\"text-right\">p99</th>\n                      <th className=\"text-right\">Max</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr key=\"DB\">\n                      <td>\n                        <Progress\n                          min=\"0\"\n                          max={metrics.gauges['HikariPool-1.pool.TotalConnections'].value}\n                          value={metrics.gauges['HikariPool-1.pool.ActiveConnections'].value}\n                        >\n                          <TextFormat\n                            value={metrics.gauges['HikariPool-1.pool.ActiveConnections'].value * 100 / metrics.gauges['HikariPool-1.pool.TotalConnections'].value}\n                            type=\"number\"\n                            format={APP_WHOLE_NUMBER_FORMAT} />\n                          %\n                        </Progress>\n                      </td>\n                      <td className=\"text-right\">{metrics.histograms['HikariPool-1.pool.Usage'].count}</td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].mean)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].min)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p50)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p75)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p95)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].p99)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                      <td className=\"text-right\">\n                        <TextFormat\n                          value={this.filterNaN(metrics.histograms['HikariPool-1.pool.Usage'].max)}\n                          type=\"number\"\n                          format={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </div>\n            </div>\n          : '' }\n\n          {this.renderModal()}\n\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  metrics: storeState.administration.metrics,\n  isFetching: storeState.administration.isFetching,\n  threadDump: storeState.administration.threadDump\n});\n\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MetricsPage);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/metrics/metrics.tsx","\nimport * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ModalRoute } from 'react-router-modal';\n\nimport UserManagement from './user-management';\nimport UserManagementDetail from './user-management-detail';\nimport UserManagementDialog from './user-management-dialog';\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\n\nconst Routes = ({ match }) => (\n  <div>\n    <Switch>\n      <Route exact path={match.url} component={UserManagement} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/new`} component={UserManagementDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\n      <ModalRoute exact parentPath={match.url} path={`${match.url}/:login/edit`} component={UserManagementDialog} />\n      <Route exact path={`${match.url}/:login`} component={UserManagementDetail} />\n    </Switch>\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/user-management/index.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\nimport { FaBan, FaTrash } from 'react-icons/lib/fa';\n\nimport { getUser, deleteUser } from '../../../reducers/user-management';\n\nexport interface IUserManagementDeleteDialogProps {\n  getUser: ICrudGetAction;\n  deleteUser: ICrudDeleteAction;\n  user: any;\n  match: any;\n  history: any;\n}\n\nexport interface IUserManagementDeleteDialogState {\n  showModal: boolean;\n}\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps, IUserManagementDeleteDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  confirmDelete = () => {\n    this.props.deleteUser(this.props.user.login);\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/admin/user-management');\n  }\n\n  render() {\n    const { user } = this.props;\n    const { showModal } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose}\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"entity.delete.title\">Confirm delete operation</Translate></ModalHeader>\n      <ModalBody>\n        <Translate contentKey=\"userManagement.delete.question\" interpolate={{ login: user.login }}>Are you sure you want to delete this User?</Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={this.handleClose}>\n          <FaBan/>&nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={this.confirmDelete}>\n          <FaTrash/>&nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser, deleteUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDeleteDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getUser } from '../../../reducers/user-management';\nimport { APP_DATE_FORMAT } from '../../../config/constants';\n\nexport interface IUserManagementDetailProps {\n  getUser: ICrudGetAction;\n  user: any;\n  match: any;\n}\nexport class UserManagementDetail extends React.Component<IUserManagementDetailProps, undefined> {\n\n  componentDidMount() {\n    this.props.getUser(this.props.match.params.login);\n  }\n\n  render() {\n    const { user } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"userManagement.detail.title\">User</Translate> [<b>{user.login}</b>]\n        </h2>\n        <dl className=\"row-md jh-entity-details\">\n          <dt><Translate contentKey=\"userManagement.login\">Login</Translate></dt>\n          <dd>\n            <span>{user.login}</span>&nbsp;\n            {\n              user.activated ? (\n                <span className=\"badge badge-success\"><Translate contentKey=\"userManagement.activated\">Activated</Translate></span>\n              ) : (\n                <span className=\"badge badge-danger\"><Translate contentKey=\"userManagement.deactivated\">Deactivated</Translate></span>\n              )\n            }\n          </dd>\n          <dt><Translate contentKey=\"userManagement.firstName\">First Name</Translate></dt>\n          <dd>{user.firstName}</dd>\n          <dt><Translate contentKey=\"userManagement.lastName\">Last Name</Translate></dt>\n          <dd>{user.lastName}</dd>\n          <dt><Translate contentKey=\"userManagement.email\">Email</Translate></dt>\n          <dd>{user.email}</dd>\n          <dt><Translate contentKey=\"userManagement.langKey\">Lang Key</Translate></dt>\n          <dd>{user.langKey}</dd>\n          <dt><Translate contentKey=\"userManagement.createdBy\">Created By</Translate></dt>\n          <dd>{user.createdBy}</dd>\n          <dt><Translate contentKey=\"userManagement.createdDate\">Created Date</Translate></dt>\n          <dd><TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></dd>\n          <dt><Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate></dt>\n          <dd>{user.lastModifiedBy}</dd>\n          <dt><Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate></dt>\n          <dd><TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></dd>\n          <dt><Translate contentKey=\"userManagement.profiles\">Profiles</Translate></dt>\n          <dd>\n            <ul className=\"list-unstyled\">\n              {\n                user.authorities ? (\n                user.authorities.map((authority, i) => (\n                  <li key={`user-auth-${i}`}>\n                    <span className=\"badge badge-info\">{authority}</span>\n                  </li>\n                ))) : null\n              }\n            </ul>\n          </dd>\n        </dl>\n        <Button\n          tag={Link} to=\"/admin/user-management\" replace\n          color=\"info\"\n        >\n          <FaArrowLeft/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.back\">Back</Translate></span>\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  user: storeState.userManagement.user\n});\n\nconst mapDispatchToProps = { getUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getUser, getRoles, updateUser, createUser } from '../../../reducers/user-management';\nimport { locales } from '../../../config/translation';\n\nexport interface IUserManagementDialogProps {\n  getUser: ICrudGetAction;\n  getRoles: ICrudGetAction;\n  updateUser: ICrudPutAction;\n  createUser: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  user: any;\n  roles: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IUserManagementDialogState {\n  showModal: boolean;\n  isNew: boolean;\n}\n\nexport class UserManagementDialog extends React.Component<IUserManagementDialogProps, IUserManagementDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: true,\n      isNew: !this.props.match.params || !this.props.match.params.login\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getUser(this.props.match.params.login);\n    this.props.getRoles();\n  }\n\n  saveUSer = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    this.props.history.push('/admin/user-management');\n  }\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <Modal\n        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose} size=\"lg\"\n      >\n      <ModalHeader toggle={this.handleClose}><Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate></ModalHeader>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : user} onSubmit={this.saveUSer} >\n          <ModalBody>\n            { user.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label for=\"login\"><Translate contentKey=\"userManagement.login\">Login</Translate></Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"login\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"firstName\"><Translate contentKey=\"userManagement.firstName\">First Name</Translate></Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"firstName\" />\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"lastName\"><Translate contentKey=\"userManagement.lastName\">Last Name</Translate></Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"lastName\" />\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"email\"><Translate contentKey=\"userManagement.email\">E-mail</Translate></Label>\n              <AvInput type=\"email\" className=\"form-control\" name=\"email\" required/>\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 100 characters.</AvFeedback>\n              <AvFeedback>This field is required to be at least 5 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label check>\n                <AvInput type=\"checkbox\" name=\"activated\" /> <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n              </Label>\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 100 characters.</AvFeedback>\n              <AvFeedback>This field is required to be at least 5 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"langKey\"><Translate contentKey=\"userManagement.langKey\">Language Key</Translate></Label>\n              <AvInput type=\"select\" className=\"form-control\" name=\"langKey\">\n                {locales.map(lang => <option value={lang} key={lang}>{lang}</option>)}\n              </AvInput>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"authorities\"><Translate contentKey=\"userManagement.profiles\">Language Key</Translate></Label>\n              <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" multiple>\n                {roles.map(role => <option value={role} key={role}>{role}</option>)}\n              </AvInput>\n            </AvGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      }\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/user-management/user-management-dialog.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\nimport {\n  Translate,\n  ICrudGetAction,\n  TextFormat,\n  JhiPagination,\n  getPaginationItemsNumber,\n  getSortState,\n  IPaginationState\n} from 'react-jhipster';\nimport { FaPlus, FaEye, FaPencil, FaSort, FaTrash } from 'react-icons/lib/fa';\n\nimport { getUsers } from '../../../reducers/user-management';\nimport { APP_DATE_FORMAT } from '../../../config/constants';\nimport { ITEMS_PER_PAGE } from '../../../shared/util/pagination.constants';\n\nexport interface IUserManagementProps {\n  getUsers: ICrudGetAction;\n  users: any[];\n  account: any;\n  match: any;\n  totalItems: 0;\n  history: any;\n  location: any;\n}\n\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...getSortState(props.location, ITEMS_PER_PAGE)\n    };\n  }\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  sort = prop => () => {\n    this.setState({\n      order: this.state.order === 'asc' ? 'desc' : 'asc',\n      sort: prop\n    }, () => this.sortUsers());\n  }\n\n  sortUsers() {\n    this.getUsers();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\n\n  getUsers = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\n  }\n\n  render() {\n    const { users, account, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"userManagement.home.title\">Users</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"userManagement.home.createLabel\" />\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th onClick={this.sort('id')}><Translate contentKey=\"global.field.id\">ID</Translate><FaSort/></th>\n                <th onClick={this.sort('login')}><Translate contentKey=\"userManagement.login\">Login</Translate><FaSort/></th>\n                <th onClick={this.sort('email')}><Translate contentKey=\"userManagement.email\">Email</Translate><FaSort/></th>\n                <th />\n                <th onClick={this.sort('langKey')}><Translate contentKey=\"userManagement.langKey\">Lang Key</Translate><FaSort/></th>\n                <th><Translate contentKey=\"userManagement.profiles\">Profiles</Translate></th>\n                <th onClick={this.sort('createdDate')}><Translate contentKey=\"userManagement.createdDate\">Created Date</Translate><FaSort/></th>\n                <th onClick={this.sort('lastModifiedBy')}>\n                  <Translate contentKey=\"userManagement.lastModifiedBy\">Last Modified By</Translate><FaSort/>\n                </th>\n                <th onClick={this.sort('lastModifiedDate')}>\n                  <Translate contentKey=\"userManagement.lastModifiedDate\">Last Modified Date</Translate><FaSort/>\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {\n              users.map((user, i) => (\n                <tr key={`user-${i}`}>\n                  <td>\n                    <Button\n                      tag={Link} to={`${match.url}/${user.login}`}\n                      color=\"link\" size=\"sm\"\n                    >\n                      {user.id}\n                    </Button>\n                  </td>\n                  <td>{user.login}</td>\n                  <td>{user.email}</td>\n                  <td>\n                    {\n                      user.activated ? (\n                        <span className=\"badge badge-success\" style={{ cursor: 'pointer' }}>Activated</span>\n                      ) : (\n                        <span className=\"badge badge-danger\" style={{ cursor: 'pointer' }}>Deactivated</span>\n                      )\n                    }\n                  </td>\n                  <td>{user.langKey}</td>\n                  <td>\n                    {\n                      user.authorities ? (\n                      user.authorities.map((authority, j) => (\n                        <div key={`user-auth-${i}-${j}`}>\n                          <span className=\"badge badge-info\">{authority}</span>\n                        </div>\n                      ))) : null\n                    }\n                  </td>\n                  <td><TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></td>\n                  <td>{user.lastModifiedBy}</td>\n                  <td><TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid /></td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button\n                        tag={Link} to={`${match.url}/${user.login}`}\n                        color=\"info\" size=\"sm\"\n                      >\n                        <FaEye/> <span className=\"d-none d-md-inline\" ><Translate contentKey=\"entity.action.view\" /></span>\n                      </Button>\n                      <Button\n                        tag={Link} to={`${match.url}/${user.login}/edit`}\n                        color=\"primary\" size=\"sm\"\n                      >\n                        <FaPencil/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.edit\" /></span>\n                      </Button>\n                      <Button\n                        tag={Link} to={`${match.url}/${user.login}/delete`}\n                        color=\"danger\" size=\"sm\" disabled={account.login === user.login}\n                      >\n                        <FaTrash/> <span className=\"d-none d-md-inline\"><Translate contentKey=\"entity.action.delete\" /></span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))\n            }\n            </tbody>\n          </table>\n        </div>\n        <div className=\"row justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  users: storeState.userManagement.users,\n  totalItems: storeState.userManagement.totalItems,\n  account: storeState.authentication.account\n});\n\nconst mapDispatchToProps = { getUsers };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagement);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/administration/user-management/user-management.tsx","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./home.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./home.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./home.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/app/modules/home/home.scss\n// module id = ./src/main/webapp/app/modules/home/home.scss\n// module chunks = 1","import './home.scss';\n\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\n\nimport { getSession } from '../../reducers/authentication';\n\nexport interface IHomeProp {\n  account: any;\n  getSession: Function;\n}\n\nexport interface IHomeState {\n  currentUser: any;\n}\n\nexport class Home extends React.Component<IHomeProp, IHomeState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: props.account\n    };\n  }\n\n  componentWillMount() {\n    this.props.getSession();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      currentUser: nextProps.account\n    });\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h2><Translate contentKey=\"home.title\">Welcome, Java Hipster!</Translate></h2>\n          <p className=\"lead\"><Translate contentKey=\"home.subtitle\">This is your homepage</Translate></p>\n          {\n            (currentUser && currentUser.login) ? (\n              <div>\n                <div className=\"alert alert-success\">\n                  <Translate contentKey=\"home.logged.message\" interpolate={{ username: currentUser.login }}>You are logged in as user </Translate>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <div className=\"alert alert-warning\">\n                  <Translate contentKey=\"global.messages.info.authenticated.prefix\">If you want to </Translate>\n                  <Link to=\"/login\" className=\"alert-link\"><Translate contentKey=\"global.messages.info.authenticated.link\">sign in</Translate></Link>\n                  <Translate contentKey=\"global.messages.info.authenticated.suffix\">, you can try the default accounts:\n                  <br />- Administrator (login=&quot;admin&quot; and password=&quot;admin&quot;)\n                  <br />- User (login=&quot;user&quot; and password=&quot;user&quot;).</Translate>\n                </div>\n\n                <div className=\"alert alert-warning\">\n                  <Translate contentKey=\"global.messages.info.register.noaccount\">You do not have an account yet?</Translate>&nbsp;\n                  <a className=\"alert-link\"><Translate contentKey=\"global.messages.info.register.link\">Register a new account</Translate></a>\n                </div>\n              </div>\n            )\n          }\n          <p>\n            <Translate contentKey=\"home.question\">If you have any question on JHipster:</Translate>\n          </p>\n\n          <ul>\n            <li>\n              <a href=\"http://jhipster.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Translate contentKey=\"home.link.homepage\">JHipster homepage</Translate>\n              </a>\n            </li>\n            <li>\n              <a href=\"http://stackoverflow.com/tags/jhipster/info\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Translate contentKey=\"home.link.stackoverflow\">JHipster on Stack Overflow</Translate>\n              </a>\n            </li>\n            <li>\n              <a href=\"https://github.com/jhipster/generator-jhipster/issues?state=open\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Translate contentKey=\"home.link.bugtracker\">JHipster bug tracker</Translate>\n              </a>\n            </li>\n            <li>\n              <a href=\"https://gitter.im/jhipster/generator-jhipster\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Translate contentKey=\"home.link.chat\">JHipster public chat room</Translate>\n              </a>\n            </li>\n            <li>\n              <a href=\"https://twitter.com/java_hipster\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Translate contentKey=\"home.link.follow\">follow @java_hipster on Twitter</Translate>\n              </a>\n            </li>\n          </ul>\n\n          <p>\n            <Translate contentKey=\"home.like\">If you like JHipster, do not forget to give us a star on</Translate>\n            <a href=\"https://github.com/jhipster/generator-jhipster\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>!\n          </p>\n        </div>\n        <div className=\"col-md-3 pad\">\n          <span className=\"hipster img-fluid rounded\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  account: storeState.authentication.account,\n  isAuthenticated: storeState.authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/home/home.tsx","import * as React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label } from 'reactstrap';\nimport { AvForm, AvField, AvGroup, AvInput } from 'availity-reactstrap-validation';\n\nexport interface ILoginModalProps {\n  showModal: boolean;\n  loginError: boolean;\n  handleLogin: Function;\n  handleClose: Function;\n}\n\nclass LoginModal extends React.Component<ILoginModalProps, {}> {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {};\n  }\n\n  handleSubmit = (event, errors, { username, password, rememberMe }) => {\n    const { handleLogin } = this.props;\n    handleLogin(username, password, rememberMe);\n  }\n\n  render() {\n    const { loginError, handleClose } = this.props;\n\n    return (\n      <Modal isOpen={this.props.showModal} toggle={handleClose} backdrop=\"static\" id=\"login-page\">\n        <AvForm onSubmit={this.handleSubmit}>\n          <ModalHeader toggle={handleClose} id=\"login-title\"><Translate contentKey=\"login.title\" /></ModalHeader>\n          <ModalBody>\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                { loginError ?\n                  <div className=\"alert alert-danger\">\n                    <Translate contentKey=\"login.messages.error.authentication\" />\n                  </div>\n                  : null\n                }\n              </div>\n              <div className=\"col-md-12\">\n                <AvField\n                  name=\"username\"\n                  label={<Translate contentKey=\"global.form.username\" />}\n                  placeholder={translate('global.form.username.placeholder')}\n                  required errorMessage=\"Username cannot be empty!\"\n                />\n                <AvField\n                  name=\"password\" type=\"password\"\n                  label={<Translate contentKey=\"login.form.password\" />}\n                  placeholder={translate('login.form.password.placeholder')}\n                  required errorMessage=\"Password cannot be empty!\"\n                />\n                <AvGroup>\n                  <Label check inline for=\"rememberMe\" className=\"form-check-label\">\n                    <AvInput type=\"checkbox\" name=\"rememberMe\" /> <Translate contentKey=\"login.form.rememberme\" />\n                  </Label>\n                </AvGroup>\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={handleClose} tabIndex=\"1\"><Translate contentKey=\"entity.action.cancel\" /></Button>{' '}\n            <Button color=\"primary\" type=\"submit\"><Translate contentKey=\"login.form.button\" /></Button>\n          </ModalFooter>\n        </AvForm>\n      </Modal>\n    );\n  }\n}\n\nexport default LoginModal;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/login/login-modal.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport LoginModal from './login-modal';\nimport { login } from '../../reducers/authentication';\n\nexport interface ILoginProps {\n  isAuthenticated: boolean;\n  showModal: boolean;\n  loginError?: boolean;\n  location: any;\n  login: Function;\n}\n\nexport interface ILoginState {\n  showModal: boolean;\n  redirectToReferrer: boolean;\n}\n\nexport class Login extends React.Component<ILoginProps, ILoginState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: props.showModal,\n      redirectToReferrer: props.isAuthenticated\n    };\n  }\n\n  componentWillReceiveProps(nextProps: ILoginProps) {\n    this.setState({\n      showModal: nextProps.showModal,\n      redirectToReferrer: nextProps.isAuthenticated\n    });\n  }\n\n  handleLogin = (username, password, rememberMe = false) => {\n    this.props.login(username, password, rememberMe);\n  }\n\n  handleClose = () => {\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    const { from } = this.props.location.state || { from: { pathname: '/', search: this.props.location.search } };\n    const { showModal, redirectToReferrer } = this.state;\n    if (redirectToReferrer) {\n      return <Redirect to={from} />;\n    }\n    return (\n      <LoginModal\n        showModal={showModal}\n        handleLogin={this.handleLogin}\n        handleClose={this.handleClose}\n        loginError={this.props.loginError}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }) => ({\n  isAuthenticated: authentication.isAuthenticated,\n  loginError: authentication.loginError,\n  showModal: authentication.showModalLogin\n});\n\nconst mapDispatchToProps = { login };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/login/login.tsx","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { logout } from '../../reducers/authentication';\n\nexport interface ILogoutProps {\n  logout: Function;\n}\n\nexport class Logout extends React.Component<ILogoutProps, undefined> {\n\n  componentWillMount() {\n    this.props.logout();\n  }\n\n  render() {\n    return (\n      <div className=\"p-5\">\n        <h4>Logged out succesfully!</h4>\n        <Redirect to={{\n          pathname: '/'\n        }} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({});\n\nconst mapDispatchToProps = { logout };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logout);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/modules/login/logout.tsx","import axios from 'axios';\nimport { ICrudPutAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from './action-type.util';\nimport { messages } from '../config/constants';\n\nexport const ACTION_TYPES = {\n  UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n  UPDATE_PASSWORD: 'account/UPDATE_PASSWORD'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  account: {},\n  updateSuccess: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.UPDATE_PASSWORD):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n    case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        account: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.UPDATE_PASSWORD):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = '/api/account';\n// Actions\nexport const saveAccountSettings: ICrudPutAction = account => ({\n  type: ACTION_TYPES.UPDATE_ACCOUNT,\n  meta: {\n    successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n    errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n  },\n  payload: axios.post(apiUrl, account)\n});\n\nexport const savePassword: ICrudPutAction = password => ({\n  type: ACTION_TYPES.UPDATE_PASSWORD,\n  meta: {\n    successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n    errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n  },\n  payload: axios.post(`${apiUrl}/change-password`, password)\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/account.ts","/**\n * Appends REQUEST asyc action type\n */\n\nexport const REQUEST = actionType => `${actionType}_PENDING`;\n\n/**\n * Appends SUCCESS asyc action type\n */\n\nexport const SUCCESS = actionType => `${actionType}_FULFILLED`;\n\n/**\n * Appends FAILURE asyc action type\n */\n\nexport const FAILURE = actionType => `${actionType}_REJECTED`;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/action-type.util.ts","import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from './action-type.util';\n\nexport const ACTION_TYPES = {\n  FETCH_GATEWAY_ROUTE: 'administration/FETCH_GATEWAY_ROUTE',\n  FETCH_LOGS: 'administration/FETCH_LOGS',\n  FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\n  FETCH_HEALTH: 'administration/FETCH_HEALTH',\n  FETCH_METRICS: 'administration/FETCH_METRICS',\n  FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\n  FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\n  FETCH_ENV: 'administration/FETCH_ENV',\n  FETCH_AUDITS: 'administration/FETCH_AUDITS'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  gateway: {\n    routes: []\n  },\n  logs: {\n    loggers: []\n  },\n  health: {},\n  metrics: {},\n  threadDump: [],\n  configuration: {\n    configProps: {},\n    env: {}\n  },\n  audits: []\n};\n\n// Reducer\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n    case REQUEST(ACTION_TYPES.FETCH_METRICS):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.FETCH_LOGS):\n    case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case REQUEST(ACTION_TYPES.FETCH_ENV):\n    case REQUEST(ACTION_TYPES.FETCH_AUDITS):\n    case REQUEST(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n    case FAILURE(ACTION_TYPES.FETCH_METRICS):\n    case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\n    case FAILURE(ACTION_TYPES.FETCH_LOGS):\n    case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case FAILURE(ACTION_TYPES.FETCH_ENV):\n    case FAILURE(ACTION_TYPES.FETCH_AUDITS):\n    case FAILURE(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n      return {\n        ...state,\n        loading: false,\n        gateway: {\n          routes: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_METRICS):\n      return {\n        ...state,\n        loading: false,\n        metrics: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\n      return {\n        ...state,\n        loading: false,\n        threadDump: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_LOGS):\n      return {\n        ...state,\n        loading: false,\n        logs: {\n          loggers: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          configProps: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_ENV):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          env: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\n      return {\n        ...state,\n        loading: false,\n        audits: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        health: action.payload.data\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nexport const gatewayRoutes = () => ({\n  type: ACTION_TYPES.FETCH_GATEWAY_ROUTE,\n  payload: axios.get('/api/gateway/routes')\n});\n\nexport const systemHealth = () => ({\n  type: ACTION_TYPES.FETCH_HEALTH,\n  payload: axios.get('/management/health')\n});\n\nexport const systemMetrics = () => ({\n  type: ACTION_TYPES.FETCH_METRICS,\n  payload: axios.get('/management/metrics')\n});\n\nexport const systemThreadDump = () => ({\n  type: ACTION_TYPES.FETCH_THREAD_DUMP,\n  payload: axios.get('/management/dump')\n});\n\nexport const getLoggers = () => ({\n  type: ACTION_TYPES.FETCH_LOGS,\n  payload: axios.get('/management/logs')\n});\n\nexport const changeLogLevel = (name, level) => {\n  const body = {\n    level,\n    name\n  };\n  return async dispatch => {\n    await dispatch({\n      type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\n      payload: axios.put('/management/logs', body)\n    });\n    dispatch(getLoggers());\n  };\n};\n\nexport const getConfigurations = () => ({\n  type: ACTION_TYPES.FETCH_CONFIGURATIONS,\n  payload: axios.get('/management/configprops')\n});\n\nexport const getEnv = () => ({\n  type: ACTION_TYPES.FETCH_ENV,\n  payload: axios.get('/management/env')\n});\n\nexport const getAudits = (fromDate, toDate, page = 0, size = 20) => {\n  let requestUrl = `/management/jhipster/audits?page=${page}&size=${size}`;\n  if (toDate) {\n    requestUrl += `&toDate=${toDate}`;\n  }\n  if (fromDate) {\n    requestUrl += `&fromDate=${fromDate}`;\n  }\n  return {\n    type: ACTION_TYPES.FETCH_AUDITS,\n    payload: axios.get(requestUrl)\n  };\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/administration.ts","import axios from 'axios';\nimport { Storage } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from './action-type.util';\n\nexport const ACTION_TYPES = {\n  LOGIN: 'authentication/LOGIN',\n  GET_SESSION: 'authentication/GET_SESSION',\n  LOGOUT: 'authentication/LOGOUT',\n  CLEAR_AUTH: 'authentication/CLEAR_AUTH',\n  ERROR_MESSAGE: 'authentication/ERROR_MESSAGE'\n};\n\nconst initialState = {\n  loading: false,\n  isAuthenticated: false,\n  loginSuccess: false,\n  account: {},\n  errorMessage: null, // Errors returned from server side\n  loginError: false, // Errors returned from server side\n  redirectMessage: null,\n  showModalLogin: false\n};\n\n// Reducer\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.LOGIN):\n    case REQUEST(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.LOGIN):\n      return {\n        ...initialState,\n        errorMessage: action.payload,\n        showModalLogin: true,\n        loginError: true\n      };\n    case FAILURE(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        showModalLogin: true,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.LOGIN):\n      return {\n        ...state,\n        loading: false,\n        loginError: false,\n        showModalLogin: false,\n        loginSuccess: true\n      };\n    case ACTION_TYPES.LOGOUT:\n      return {\n        ...initialState,\n        showModalLogin: true\n      };\n    case SUCCESS(ACTION_TYPES.GET_SESSION):\n      {\n        const isAuthenticated = action.payload && action.payload.data && action.payload.data.activated;\n        return {\n          ...state,\n          isAuthenticated,\n          loading: false,\n          account: action.payload.data\n        };\n      }\n    case ACTION_TYPES.ERROR_MESSAGE:\n      return {\n        ...initialState,\n        showModalLogin: true,\n        redirectMessage: action.message\n      };\n    case ACTION_TYPES.CLEAR_AUTH:\n      return {\n        ...state,\n        loading: false,\n        showModalLogin: true,\n        isAuthenticated: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport const displayAuthError = message => ({ type: ACTION_TYPES.ERROR_MESSAGE, message });\n\nexport const getSession = () => dispatch => dispatch({\n  type: ACTION_TYPES.GET_SESSION,\n  payload: axios.get('/api/account')\n});\n\nexport const login = (username, password, rememberMe = false) => async (dispatch, getState) => {\n  const result = await dispatch({\n    type: ACTION_TYPES.LOGIN,\n    payload: axios.post('/api/authenticate', { username, password, rememberMe })\n  });\n  const bearerToken = result.value.headers.authorization;\n  if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n    const jwt = bearerToken.slice(7, bearerToken.length);\n    if (rememberMe) {\n      Storage.local.set('jhi-authenticationToken', jwt);\n    } else {\n      Storage.session.set('jhi-authenticationToken', jwt);\n    }\n  }\n  dispatch(getSession());\n};\n\nexport const clearAuthToken = () => {\n  if (Storage.local.get('jhi-authenticationToken')) {\n    Storage.local.remove('jhi-authenticationToken');\n  }\n  if (Storage.session.get('jhi-authenticationToken')) {\n    Storage.session.remove('jhi-authenticationToken');\n  }\n};\n\nexport const logout = () => dispatch => {\n  clearAuthToken();\n  dispatch({\n    type: ACTION_TYPES.LOGOUT\n  });\n};\n\nexport const clearAuthentication = messageKey => (dispatch, getState) => {\n  clearAuthToken();\n  dispatch(displayAuthError(messageKey));\n  dispatch({\n    type: ACTION_TYPES.CLEAR_AUTH\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/authentication.ts","import { combineReducers } from 'redux';\r\nimport { loadingBarReducer as loadingBar } from 'react-redux-loading-bar';\r\n\r\nimport locale from './locale';\r\nimport layout from './layout';\r\nimport authentication from './authentication';\r\nimport administration from './administration';\r\nimport userManagement from './user-management';\r\nimport field from '../entities/field/field.reducer';\r\nimport form from '../entities/form/form.reducer';\r\nimport formContent from '../entities/form-content/form-content.reducer';\r\nimport fieldValue from '../entities/field-value/field-value.reducer';\r\nimport fieldOption from '../entities/field-option/field-option.reducer';\n/* jhipster-needle-add-reducer-import - JHipster will add reducer here */\r\n\r\nexport default combineReducers({\r\n  authentication,\r\n  locale,\r\n  layout,\r\n  administration,\r\n  userManagement,\r\n  field,\r\n  form,\r\n  formContent,\r\n  fieldValue,\r\n  fieldOption,\n  /* jhipster-needle-add-reducer-combine - JHipster will add reducer here */\r\n  loadingBar\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/index.ts","export const ACTION_TYPES = {\n  EMBEDDED_MODE: 'layout/EMBEDDED_MODE'\n};\n\nconst initialState = {\n  embedded: false\n};\n\n// Reducer\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.EMBEDDED_MODE:\n      return {\n        ...initialState,\n        embedded: action.embedded\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setEmbeddedMode = embedded => ({ type: ACTION_TYPES.EMBEDDED_MODE, embedded });\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/layout.ts","export const ACTION_TYPES = {\n  SET_LOCALE: 'locale/SET_LOCALE'\n};\n\nconst initialState = {\n  currentLocale: 'en'\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_LOCALE:\n      return {\n        currentLocale: action.locale || initialState.currentLocale\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setLocale = locale => ({\n  type: ACTION_TYPES.SET_LOCALE,\n  locale\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/locale.ts","import axios from 'axios';\nimport { ICrudGetAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from './action-type.util';\nimport { messages } from '../config/constants';\n\nexport const ACTION_TYPES = {\n  FETCH_ROLES: 'userManagement/FETCH_ROLES',\n  FETCH_USERS: 'userManagement/FETCH_USERS',\n  FETCH_USER:  'userManagement/FETCH_USER',\n  CREATE_USER: 'userManagement/CREATE_USER',\n  UPDATE_USER: 'userManagement/UPDATE_USER',\n  DELETE_USER: 'userManagement/DELETE_USER'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  users: [],\n  authorities: [],\n  user: {},\n  updating: false,\n  updateSuccess: false,\n  totalItems: 0\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_ROLES):\n      return {\n        ...state\n      };\n    case REQUEST(ACTION_TYPES.FETCH_USERS):\n    case REQUEST(ACTION_TYPES.FETCH_USER):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_USER):\n    case REQUEST(ACTION_TYPES.UPDATE_USER):\n    case REQUEST(ACTION_TYPES.DELETE_USER):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_USERS):\n    case FAILURE(ACTION_TYPES.FETCH_USER):\n    case FAILURE(ACTION_TYPES.FETCH_ROLES):\n    case FAILURE(ACTION_TYPES.CREATE_USER):\n    case FAILURE(ACTION_TYPES.UPDATE_USER):\n    case FAILURE(ACTION_TYPES.DELETE_USER):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_ROLES):\n      return {\n        ...state,\n        loading: false,\n        authorities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_USERS):\n      return {\n        ...state,\n        loading: false,\n        users: action.payload.data,\n        totalItems: action.payload.headers['x-total-count']\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_USER):\n      return {\n        ...state,\n        loading: false,\n        user: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_USER):\n    case SUCCESS(ACTION_TYPES.UPDATE_USER):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        user: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_USER):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        user: {}\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = '/api/users';\n// Actions\nexport const getUsers: ICrudGetAction = (page, size, sort) => {\n  const requestUrl = `${apiUrl}${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\n  return {\n    type: ACTION_TYPES.FETCH_USERS,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const getRoles: ICrudGetAction = () => ({\n  type: ACTION_TYPES.FETCH_ROLES,\n  payload: axios.get(`${apiUrl}/authorities`)\n});\n\nexport const getUser: ICrudGetAction = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_USER,\n    payload: axios.get(requestUrl)\n  };\n};\n\nexport const createUser: ICrudPutAction = user => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_USER,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.post(apiUrl, user)\n  });\n  dispatch(getUsers());\n  return result;\n};\n\nexport const updateUser: ICrudPutAction = user => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_USER,\n    meta: {\n      successMessage: messages.DATA_CREATE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.put(apiUrl, user)\n  });\n  dispatch(getUsers());\n  return result;\n};\n\nexport const deleteUser: ICrudDeleteAction = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_USER,\n    meta: {\n      successMessage: messages.DATA_DELETE_SUCCESS_ALERT,\n      errorMessage: messages.DATA_UPDATE_ERROR_ALERT\n    },\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getUsers());\n  return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/reducers/user-management.ts","import * as React from 'react';\nimport { Route } from 'react-router-dom';\nimport { PrivateRoute } from 'react-jhipster';\n\nimport Login from './modules/login/login';\nimport Logout from './modules/login/logout';\nimport Home from './modules/home/home';\nimport Admin from './modules/administration';\nimport Account from './modules/account';\nimport Entities from './entities';\n\nconst Routes = () => (\n  <div className=\"view-routes\">\n    <Route exact path=\"/\" component={Home}/>\n    <Route path=\"/login\" component={Login} />\n    <Route path=\"/logout\" component={Logout} />\n    <PrivateRoute path=\"/admin\" component={Admin} />\n    <PrivateRoute path=\"/account\" component={Account} />\n    <Route path=\"**\" component={Entities} />\n  </div>\n);\n\nexport default Routes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/routes.tsx","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./footer.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./footer.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./footer.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/app/shared/layout/footer/footer.scss\n// module id = ./src/main/webapp/app/shared/layout/footer/footer.scss\n// module chunks = 1","import './footer.scss';\n\nimport * as React from 'react';\nimport { Translate } from 'react-jhipster';\n\nconst Footer = props => (\n  <div className=\"footer page-content\">\n    <div className=\"row\">\n      <p className=\"col-md-12\"><Translate contentKey=\"footer\">Your footer</Translate></p>\n    </div>\n  </div>\n);\n\nexport default Footer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/shared/layout/footer/footer.tsx","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./header.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./header.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../../../node_modules/css-loader/index.js!../../../../../../../node_modules/postcss-loader/lib/index.js!../../../../../../../node_modules/sass-loader/lib/loader.js!./header.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/app/shared/layout/header/header.scss\n// module id = ./src/main/webapp/app/shared/layout/header/header.scss\n// module chunks = 1","import './header.scss';\r\n\r\nimport * as React from 'react';\r\nimport { Translate } from 'react-jhipster';\r\nimport {\r\n  Navbar, Nav, NavItem, NavLink, NavbarToggler, NavbarBrand, Collapse,\r\n  UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem\r\n} from 'reactstrap';\r\nimport {\r\n  FaHome, FaThList, FaUserPlus, FaUser, FaFlag, FaHeart,\r\n  FaList, FaTasks, FaDashboard, FaBook, FaWrench, FaSignIn, FaSignOut,\r\n  FaClockO, FaHddO,\r\n  // tslint:disable-next-line\r\n  FaRoad, FaAsterisk\r\n} from 'react-icons/lib/fa';\r\n\r\nimport { NavLink as Link } from 'react-router-dom';\r\nimport LoadingBar from 'react-redux-loading-bar';\r\n\r\nimport { locales } from '../../../config/translation';\r\nimport appConfig from '../../../config/constants';\r\n\r\nexport interface IHeaderProps {\r\n  isAuthenticated: boolean;\r\n  currentLocale: string;\r\n  onLocaleChange: Function;\r\n}\r\nconst BrandIcon = props => (\r\n  <div {...props} className=\"brand-icon\">\r\n    <img\r\n      src=\"static/images/logo-jhipster-react.svg\"\r\n      alt=\"Logo\"\r\n    />\r\n  </div>\r\n);\r\nexport class Header extends React.Component<IHeaderProps, { menuOpen: boolean }> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menuOpen: false\r\n    };\r\n  }\r\n\r\n  handleLocaleChange = event => {\r\n    this.props.onLocaleChange(event.target.value);\r\n  }\r\n\r\n  renderDevRibbon = () => (\r\n    process.env.NODE_ENV === 'development' ?\r\n      <div className=\"ribbon dev\"><a href=\"\"><Translate contentKey=\"global.ribbon.dev\" /></a></div> :\r\n      null\r\n  )\r\n\r\n  toggleMenu = () => {\r\n    this.setState({ menuOpen: !this.state.menuOpen });\r\n  }\r\n\r\n  render() {\r\n    const { currentLocale, isAuthenticated } = this.props;\r\n    const entityMenuItems = [\r\n      (\r\n        <DropdownItem tag={Link} key=\"field\" to=\"/field\">\r\n          <FaAsterisk />&nbsp;\r\n          Field\r\n        </DropdownItem>\r\n      ),\r\n      (\r\n        <DropdownItem tag={Link} key=\"form\" to=\"/form\">\r\n          <FaAsterisk />&nbsp;\r\n          Form\r\n        </DropdownItem>\r\n      ),\r\n      (\r\n        <DropdownItem tag={Link} key=\"form-content\" to=\"/form-content\">\r\n          <FaAsterisk />&nbsp;\r\n          Form Content\r\n        </DropdownItem>\r\n      ),\r\n      (\r\n        <DropdownItem tag={Link} key=\"field-value\" to=\"/field-value\">\r\n          <FaAsterisk />&nbsp;\r\n          Field Value\r\n        </DropdownItem>\r\n      ),\r\n      (\n        <DropdownItem tag={Link} key=\"field-option\" to=\"/field-option\">\n          <FaAsterisk />&nbsp;\n          Field Option\n        </DropdownItem>\n      ),\n      /* jhipster-needle-add-entity-to-menu - - JHipster will add entities to the menu here */\r\n      <span key=\"dummy-placeholder\"/> /* workaround to avoid error when there are no entities */\r\n    ];\r\n    /* jhipster-needle-add-element-to-menu - JHipster will add entities to the menu here */\r\n    const adminMenuItems = [\r\n      <DropdownItem tag={Link} key=\"user-management\" to=\"/admin/user-management\"><FaUser /> User Management</DropdownItem>,\r\n      <DropdownItem tag={Link} key=\"metrics\" to=\"/admin/metrics\"><FaDashboard /> Metrics</DropdownItem>,\r\n      <DropdownItem tag={Link} key=\"health\" to=\"/admin/health\"><FaHeart /> Health</DropdownItem>,\r\n      <DropdownItem tag={Link} key=\"configuration\" to=\"/admin/configuration\"><FaList /> Configuration</DropdownItem>,\r\n      /* TODO: audit menu */\r\n      <DropdownItem tag={Link} key=\"logs\" to=\"/admin/logs\"><FaTasks /> Logs</DropdownItem>,\r\n      /* jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here */\r\n      <DropdownItem tag={Link} key=\"docs\" to=\"/admin/docs\"><FaBook /> API Docs</DropdownItem>,\r\n      <DropdownItem tag=\"a\" key=\"h2-console\" href=\"./h2-console\" target=\"_tab\"><FaHddO /> Database</DropdownItem>\r\n    ];\r\n    const accountMenuItems = [];\r\n    if (isAuthenticated) {\r\n      accountMenuItems.push(\r\n        <DropdownItem tag={Link} key=\"settings\" to=\"/account/settings\"><FaWrench /> Settings</DropdownItem>,\r\n        <DropdownItem tag={Link} key=\"password\" to=\"/account/password\"><FaClockO /> Password</DropdownItem>,\r\n        <DropdownItem tag={Link} key=\"logout\" to=\"/logout\"><FaSignOut /> Logout</DropdownItem>\r\n      );\r\n    } else {\r\n      accountMenuItems.push(\r\n        <DropdownItem tag={Link} key=\"login\" to=\"/login\"><FaSignIn /> Login</DropdownItem>,\r\n        <DropdownItem tag={Link} key=\"register\" to=\"/register\"><FaSignIn /> Register</DropdownItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id=\"app-header\">\r\n        {this.renderDevRibbon()}\r\n        <LoadingBar className=\"loading-bar\"/>\r\n        <Navbar dark expand=\"sm\" fixed=\"top\" className=\"jh-navbar\">\r\n          <NavbarToggler aria-label=\"Menu\" onClick={this.toggleMenu} />\r\n          <NavbarBrand tag={Link} to=\"/\" className=\"brand-logo\">\r\n            <BrandIcon />\r\n            <span className=\"brand-title\"><Translate contentKey=\"global.title\">Reactster</Translate></span>\r\n            <span className=\"navbar-version\">{appConfig.VERSION}</span>\r\n          </NavbarBrand>\r\n          <Collapse isOpen={this.state.menuOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink tag={Link} to=\"/\" className=\"d-flex align-items-center\">\r\n                  <FaHome />\r\n                  <span>Home</span>\r\n                </NavLink>\r\n              </NavItem>\r\n              {isAuthenticated ? [\r\n                <UncontrolledDropdown key=\"entities\">\r\n                  <DropdownToggle nav caret className=\"d-flex align-items-center\">\r\n                    <FaThList />\r\n                    <span>Entities</span>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    {entityMenuItems}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>,\r\n                <UncontrolledDropdown key=\"admin\">\r\n                  <DropdownToggle nav caret className=\"d-flex align-items-center\">\r\n                    <FaUserPlus />\r\n                    <span>Administration</span>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right style={{ width: '120%' }}>\r\n                    {adminMenuItems}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n              ] : null}\r\n              { locales.length > 1 ?\r\n                <UncontrolledDropdown>\r\n                  <DropdownToggle nav caret className=\"d-flex align-items-center\">\r\n                    <FaFlag />\r\n                    <span>{currentLocale.toUpperCase()}</span>\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    {locales.map(lang => <DropdownItem key={lang} value={lang} onClick={this.handleLocaleChange}>{lang.toUpperCase()}</DropdownItem>)}\r\n                  </DropdownMenu>\r\n                </UncontrolledDropdown> : null\r\n              }\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle nav caret className=\"d-flex align-items-center\">\r\n                  <FaUser />\r\n                  <span>Account</span>\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  {accountMenuItems}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/shared/layout/header/header.tsx","export const ITEMS_PER_PAGE = 20;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/shared/util/pagination.constants.ts","var map = {\n\t\"./activate.json\": \"./src/main/webapp/i18n/en/activate.json\",\n\t\"./audits.json\": \"./src/main/webapp/i18n/en/audits.json\",\n\t\"./configuration.json\": \"./src/main/webapp/i18n/en/configuration.json\",\n\t\"./error.json\": \"./src/main/webapp/i18n/en/error.json\",\n\t\"./field.json\": \"./src/main/webapp/i18n/en/field.json\",\n\t\"./fieldOption.json\": \"./src/main/webapp/i18n/en/fieldOption.json\",\n\t\"./fieldType.json\": \"./src/main/webapp/i18n/en/fieldType.json\",\n\t\"./fieldValue.json\": \"./src/main/webapp/i18n/en/fieldValue.json\",\n\t\"./form.json\": \"./src/main/webapp/i18n/en/form.json\",\n\t\"./formContent.json\": \"./src/main/webapp/i18n/en/formContent.json\",\n\t\"./gateway.json\": \"./src/main/webapp/i18n/en/gateway.json\",\n\t\"./global.json\": \"./src/main/webapp/i18n/en/global.json\",\n\t\"./health.json\": \"./src/main/webapp/i18n/en/health.json\",\n\t\"./home.json\": \"./src/main/webapp/i18n/en/home.json\",\n\t\"./login.json\": \"./src/main/webapp/i18n/en/login.json\",\n\t\"./logs.json\": \"./src/main/webapp/i18n/en/logs.json\",\n\t\"./metrics.json\": \"./src/main/webapp/i18n/en/metrics.json\",\n\t\"./password.json\": \"./src/main/webapp/i18n/en/password.json\",\n\t\"./register.json\": \"./src/main/webapp/i18n/en/register.json\",\n\t\"./reset.json\": \"./src/main/webapp/i18n/en/reset.json\",\n\t\"./sessions.json\": \"./src/main/webapp/i18n/en/sessions.json\",\n\t\"./settings.json\": \"./src/main/webapp/i18n/en/settings.json\",\n\t\"./user-management.json\": \"./src/main/webapp/i18n/en/user-management.json\"\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number or string\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/main/webapp/i18n/en .json$\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en nonrecursive .json$\n// module id = ./src/main/webapp/i18n/en .json$\n// module chunks = 1","module.exports = {\"activate\":{\"title\":\"Activation\",\"messages\":{\"success\":\"<strong>Your user account has been activated.</strong> Please \",\"error\":\"<strong>Your user could not be activated.</strong> Please use the registration form to sign up.\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/activate.json\n// module id = ./src/main/webapp/i18n/en/activate.json\n// module chunks = 1","module.exports = {\"audits\":{\"title\":\"Audits\",\"filter\":{\"title\":\"Filter per date\",\"from\":\"from\",\"to\":\"to\",\"button\":{\"weeks\":\"Weeks\",\"today\":\"today\",\"clear\":\"clear\",\"close\":\"close\"}},\"table\":{\"header\":{\"principal\":\"User\",\"date\":\"Date\",\"status\":\"State\",\"data\":\"Extra data\"},\"data\":{\"remoteAddress\":\"Remote Address:\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/audits.json\n// module id = ./src/main/webapp/i18n/en/audits.json\n// module chunks = 1","module.exports = {\"configuration\":{\"title\":\"Configuration\",\"filter\":\"Filter (by prefix)\",\"table\":{\"prefix\":\"Prefix\",\"properties\":\"Properties\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/configuration.json\n// module id = ./src/main/webapp/i18n/en/configuration.json\n// module chunks = 1","module.exports = {\"error\":{\"title\":\"Error page!\",\"http\":{\"400\":\"Bad request.\",\"403\":\"You are not authorized to access this page.\",\"405\":\"The HTTP verb you used is not supported for this URL.\",\"500\":\"Internal server error.\"},\"concurrencyFailure\":\"Another user modified this data at the same time as you. Your changes were rejected.\",\"validation\":\"Validation error on the server.\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/error.json\n// module id = ./src/main/webapp/i18n/en/error.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"field\":{\"home\":{\"title\":\"Fields\",\"createLabel\":\"Create a new Field\",\"createOrEditLabel\":\"Create or edit a Field\"},\"created\":\"A new Field is created with identifier {{ param }}\",\"updated\":\"A Field is updated with identifier {{ param }}\",\"deleted\":\"A Field is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete Field {{ id }}?\"},\"detail\":{\"title\":\"Field\"},\"type\":\"Type\",\"title\":\"Title\",\"name\":\"Name\",\"form\":\"Form\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/field.json\n// module id = ./src/main/webapp/i18n/en/field.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"fieldOption\":{\"home\":{\"title\":\"Field Options\",\"createLabel\":\"Create a new Field Option\",\"createOrEditLabel\":\"Create or edit a Field Option\"},\"created\":\"A new Field Option is created with identifier {{ param }}\",\"updated\":\"A Field Option is updated with identifier {{ param }}\",\"deleted\":\"A Field Option is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete Field Option {{ id }}?\"},\"detail\":{\"title\":\"Field Option\"},\"value\":\"Value\",\"label\":\"Label\",\"field\":\"Field\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/fieldOption.json\n// module id = ./src/main/webapp/i18n/en/fieldOption.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"FieldType\":{\"null\":\"\",\"TEXT\":\"TEXT\",\"TEXTAREA\":\"TEXTAREA\",\"SELECT\":\"SELECT\",\"NUMBER\":\"NUMBER\",\"RADIO\":\"RADIO\",\"CHECKBOX\":\"CHECKBOX\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/fieldType.json\n// module id = ./src/main/webapp/i18n/en/fieldType.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"fieldValue\":{\"home\":{\"title\":\"Field Values\",\"createLabel\":\"Create a new Field Value\",\"createOrEditLabel\":\"Create or edit a Field Value\"},\"created\":\"A new Field Value is created with identifier {{ param }}\",\"updated\":\"A Field Value is updated with identifier {{ param }}\",\"deleted\":\"A Field Value is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete Field Value {{ id }}?\"},\"detail\":{\"title\":\"Field Value\"},\"value\":\"Value\",\"formContent\":\"Form Content\",\"field\":\"Field\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/fieldValue.json\n// module id = ./src/main/webapp/i18n/en/fieldValue.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"form\":{\"home\":{\"title\":\"Forms\",\"createLabel\":\"Create a new Form\",\"createOrEditLabel\":\"Create or edit a Form\"},\"created\":\"A new Form is created with identifier {{ param }}\",\"updated\":\"A Form is updated with identifier {{ param }}\",\"deleted\":\"A Form is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete Form {{ id }}?\"},\"detail\":{\"title\":\"Form\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/form.json\n// module id = ./src/main/webapp/i18n/en/form.json\n// module chunks = 1","module.exports = {\"reactsterApp\":{\"formContent\":{\"home\":{\"title\":\"Form Contents\",\"createLabel\":\"Create a new Form Content\",\"createOrEditLabel\":\"Create or edit a Form Content\"},\"created\":\"A new Form Content is created with identifier {{ param }}\",\"updated\":\"A Form Content is updated with identifier {{ param }}\",\"deleted\":\"A Form Content is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete Form Content {{ id }}?\"},\"detail\":{\"title\":\"Form Content\"},\"form\":\"Form\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/formContent.json\n// module id = ./src/main/webapp/i18n/en/formContent.json\n// module chunks = 1","module.exports = {\"gateway\":{\"title\":\"Gateway\",\"routes\":{\"title\":\"Current routes\",\"url\":\"URL\",\"service\":\"service\",\"servers\":\"Available servers\",\"error\":\"Warning: no server available!\"},\"refresh\":{\"button\":\"Refresh\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/gateway.json\n// module id = ./src/main/webapp/i18n/en/gateway.json\n// module chunks = 1","module.exports = {\"global\":{\"title\":\"Reactster\",\"browsehappy\":\"You are using an <strong>outdated</strong> browser. Please <a href=\\\"http://browsehappy.com/?locale=en\\\">upgrade your browser</a> to improve your experience.\",\"menu\":{\"home\":\"Home\",\"jhipster-needle-menu-add-element\":\"JHipster will add additional menu entries here (do not translate!)\",\"entities\":{\"main\":\"Entities\",\"form\":\"Form\",\"formContent\":\"Form Content\",\"fieldValue\":\"Field Value\",\"fieldOption\":\"Field Option\",\"jhipster-needle-menu-add-entry\":\"JHipster will add additional entities here (do not translate!)\"},\"account\":{\"main\":\"Account\",\"settings\":\"Settings\",\"password\":\"Password\",\"sessions\":\"Sessions\",\"login\":\"Sign in\",\"logout\":\"Sign out\",\"register\":\"Register\"},\"admin\":{\"main\":\"Administration\",\"userManagement\":\"User management\",\"tracker\":\"User tracker\",\"metrics\":\"Metrics\",\"health\":\"Health\",\"configuration\":\"Configuration\",\"logs\":\"Logs\",\"audits\":\"Audits\",\"apidocs\":\"API\",\"database\":\"Database\",\"jhipster-needle-menu-add-admin-element\":\"JHipster will add additional menu entries here (do not translate!)\"},\"language\":\"Language\"},\"form\":{\"username\":\"Username\",\"username.placeholder\":\"Your username\",\"newpassword\":\"New password\",\"newpassword.placeholder\":\"New password\",\"confirmpassword\":\"New password confirmation\",\"confirmpassword.placeholder\":\"Confirm the new password\",\"email\":\"Email\",\"email.placeholder\":\"Your email\"},\"messages\":{\"info\":{\"authenticated\":{\"prefix\":\"If you want to \",\"link\":\"sign in\",\"suffix\":\", you can try the default accounts:<br/>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\") <br/>- User (login=\\\"user\\\" and password=\\\"user\\\").\"},\"register\":{\"noaccount\":\"You don't have an account yet?\",\"link\":\"Register a new account\"}},\"error\":{\"dontmatch\":\"The password and its confirmation do not match!\"},\"validate\":{\"newpassword\":{\"required\":\"Your password is required.\",\"minlength\":\"Your password is required to be at least 4 characters.\",\"maxlength\":\"Your password cannot be longer than 50 characters.\",\"strength\":\"Password strength:\"},\"confirmpassword\":{\"required\":\"Your confirmation password is required.\",\"minlength\":\"Your confirmation password is required to be at least 4 characters.\",\"maxlength\":\"Your confirmation password cannot be longer than 50 characters.\"},\"email\":{\"required\":\"Your email is required.\",\"invalid\":\"Your email is invalid.\",\"minlength\":\"Your email is required to be at least 5 characters.\",\"maxlength\":\"Your email cannot be longer than 50 characters.\"}}},\"field\":{\"id\":\"ID\"},\"ribbon\":{\"dev\":\"Development\"},\"item-count\":\"Showing {{first}} - {{second}} of {{total}} items.\"},\"entity\":{\"action\":{\"addblob\":\"Add blob\",\"addimage\":\"Add image\",\"back\":\"Back\",\"cancel\":\"Cancel\",\"delete\":\"Delete\",\"edit\":\"Edit\",\"open\":\"Open\",\"save\":\"Save\",\"view\":\"View\"},\"detail\":{\"field\":\"Field\",\"value\":\"Value\"},\"delete\":{\"title\":\"Confirm delete operation\"},\"validation\":{\"required\":\"This field is required.\",\"minlength\":\"This field is required to be at least {{ min }} characters.\",\"maxlength\":\"This field cannot be longer than {{ max }} characters.\",\"min\":\"This field should be at least {{ min }}.\",\"max\":\"This field cannot be more than {{ max }}.\",\"minbytes\":\"This field should be at least {{ min }} bytes.\",\"maxbytes\":\"This field cannot be more than {{ max }} bytes.\",\"pattern\":\"This field should follow pattern for {{ pattern }}.\",\"number\":\"This field should be a number.\",\"datetimelocal\":\"This field should be a date and time.\",\"patternLogin\":\"This field can only contain letters, digits and e-mail addresses.\"}},\"error\":{\"internalServerError\":\"Internal server error\",\"server.not.reachable\":\"Server not reachable\",\"url.not.found\":\"Not found\",\"NotNull\":\"Field {{ fieldName }} cannot be empty!\",\"Size\":\"Field {{ fieldName }} does not meet min/max size requirements!\",\"userexists\":\"Login name already used!\",\"emailexists\":\"Email is already in use!\",\"idexists\":\"A new {{ entityName }} cannot already have an ID\"},\"footer\":\"This is your footer\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/global.json\n// module id = ./src/main/webapp/i18n/en/global.json\n// module chunks = 1","module.exports = {\"health\":{\"title\":\"Health Checks\",\"refresh.button\":\"Refresh\",\"stacktrace\":\"Stacktrace\",\"details\":{\"details\":\"Details\",\"properties\":\"Properties\",\"name\":\"Name\",\"value\":\"Value\",\"error\":\"Error\"},\"indicator\":{\"diskSpace\":\"Disk space\",\"mail\":\"Email\",\"db\":\"Database\"},\"table\":{\"service\":\"Service name\",\"status\":\"Status\"},\"status\":{\"UP\":\"UP\",\"DOWN\":\"DOWN\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/health.json\n// module id = ./src/main/webapp/i18n/en/health.json\n// module chunks = 1","module.exports = {\"home\":{\"title\":\"Welcome, Java Hipster!\",\"subtitle\":\"This is your homepage\",\"logged\":{\"message\":\"You are logged in as user \\\"{{username}}\\\".\"},\"question\":\"If you have any question on JHipster:\",\"link\":{\"homepage\":\"JHipster homepage\",\"stackoverflow\":\"JHipster on Stack Overflow\",\"bugtracker\":\"JHipster bug tracker\",\"chat\":\"JHipster public chat room\",\"follow\":\"follow @java_hipster on Twitter\"},\"like\":\"If you like JHipster, don't forget to give us a star on\",\"github\":\"GitHub\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/home.json\n// module id = ./src/main/webapp/i18n/en/home.json\n// module chunks = 1","module.exports = {\"login\":{\"title\":\"Sign in\",\"form\":{\"password\":\"Password\",\"password.placeholder\":\"Your password\",\"rememberme\":\"Remember me\",\"button\":\"Sign in\"},\"messages\":{\"error\":{\"authentication\":\"<strong>Failed to sign in!</strong> Please check your credentials and try again.\"}},\"password\":{\"forgot\":\"Did you forget your password?\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/login.json\n// module id = ./src/main/webapp/i18n/en/login.json\n// module chunks = 1","module.exports = {\"logs\":{\"title\":\"Logs\",\"nbloggers\":\"There are {{ total }} loggers.\",\"filter\":\"Filter\",\"table\":{\"name\":\"Name\",\"level\":\"Level\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/logs.json\n// module id = ./src/main/webapp/i18n/en/logs.json\n// module chunks = 1","module.exports = {\"metrics\":{\"title\":\"Application Metrics\",\"refresh.button\":\"Refresh\",\"updating\":\"Updating...\",\"jvm\":{\"title\":\"JVM Metrics\",\"memory\":{\"title\":\"Memory\",\"total\":\"Total Memory\",\"heap\":\"Heap Memory\",\"nonheap\":\"Non-Heap Memory\"},\"threads\":{\"title\":\"Threads\",\"all\":\"All\",\"runnable\":\"Runnable\",\"timedwaiting\":\"Timed waiting\",\"waiting\":\"Waiting\",\"blocked\":\"Blocked\",\"dump\":{\"title\":\"Threads dump\",\"id\":\"Id: \",\"blockedtime\":\"Blocked Time\",\"blockedcount\":\"Blocked Count\",\"waitedtime\":\"Waited Time\",\"waitedcount\":\"Waited Count\",\"lockname\":\"Lock name\",\"stacktrace\":\"Stacktrace\",\"show\":\"Show Stacktrace\",\"hide\":\"Hide Stacktrace\"}},\"gc\":{\"title\":\"Garbage collections\",\"marksweepcount\":\"Mark Sweep count\",\"marksweeptime\":\"Mark Sweep time\",\"scavengecount\":\"Scavenge count\",\"scavengetime\":\"Scavenge time\"},\"http\":{\"title\":\"HTTP requests (events per second)\",\"active\":\"Active requests:\",\"total\":\"Total requests:\",\"table\":{\"code\":\"Code\",\"count\":\"Count\",\"mean\":\"Mean\",\"average\":\"Average\"},\"code\":{\"ok\":\"Ok\",\"notfound\":\"Not found\",\"servererror\":\"Server Error\"}}},\"servicesstats\":{\"title\":\"Services statistics (time in millisecond)\",\"table\":{\"name\":\"Service name\",\"count\":\"Count\",\"mean\":\"Mean\",\"min\":\"Min\",\"max\":\"Max\",\"p50\":\"p50\",\"p75\":\"p75\",\"p95\":\"p95\",\"p99\":\"p99\"}},\"cache\":{\"title\":\"Cache statistics\",\"cachename\":\"Cache name\",\"hits\":\"Cache Hits\",\"misses\":\"Cache Misses\",\"gets\":\"Cache Gets\",\"puts\":\"Cache Puts\",\"removals\":\"Cache Removals\",\"evictions\":\"Cache Evictions\",\"hitPercent\":\"Cache Hit %\",\"missPercent\":\"Cache Miss %\",\"averageGetTime\":\"Average get time (µs)\",\"averagePutTime\":\"Average put time (µs)\",\"averageRemoveTime\":\"Average remove time (µs)\"},\"datasource\":{\"usage\":\"Usage\",\"title\":\"DataSource statistics (time in millisecond)\",\"name\":\"Pool usage\",\"count\":\"Count\",\"mean\":\"Mean\",\"min\":\"Min\",\"max\":\"Max\",\"p50\":\"p50\",\"p75\":\"p75\",\"p95\":\"p95\",\"p99\":\"p99\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/metrics.json\n// module id = ./src/main/webapp/i18n/en/metrics.json\n// module chunks = 1","module.exports = {\"password\":{\"title\":\"Password for [<b>{{username}}</b>]\",\"form\":{\"button\":\"Save\"},\"messages\":{\"error\":\"<strong>An error has occurred!</strong> The password could not be changed.\",\"success\":\"<strong>Password changed!</strong>\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/password.json\n// module id = ./src/main/webapp/i18n/en/password.json\n// module chunks = 1","module.exports = {\"register\":{\"title\":\"Registration\",\"form\":{\"button\":\"Register\"},\"messages\":{\"validate\":{\"login\":{\"required\":\"Your username is required.\",\"minlength\":\"Your username is required to be at least 1 character.\",\"maxlength\":\"Your username cannot be longer than 50 characters.\",\"pattern\":\"Your username can only contain letters and digits.\"}},\"success\":\"<strong>Registration saved!</strong> Please check your email for confirmation.\",\"error\":{\"fail\":\"<strong>Registration failed!</strong> Please try again later.\",\"userexists\":\"<strong>Login name already registered!</strong> Please choose another one.\",\"emailexists\":\"<strong>Email is already in use!</strong> Please choose another one.\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/register.json\n// module id = ./src/main/webapp/i18n/en/register.json\n// module chunks = 1","module.exports = {\"reset\":{\"request\":{\"title\":\"Reset your password\",\"form\":{\"button\":\"Reset password\"},\"messages\":{\"info\":\"Enter the email address you used to register\",\"success\":\"Check your emails for details on how to reset your password.\",\"notfound\":\"<strong>Email address isn't registered!</strong> Please check and try again\"}},\"finish\":{\"title\":\"Reset password\",\"form\":{\"button\":\"Validate new password\"},\"messages\":{\"info\":\"Choose a new password\",\"success\":\"<strong>Your password has been reset.</strong> Please \",\"keymissing\":\"The reset key is missing.\",\"error\":\"Your password couldn't be reset. Remember a password request is only valid for 24 hours.\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/reset.json\n// module id = ./src/main/webapp/i18n/en/reset.json\n// module chunks = 1","module.exports = {\"sessions\":{\"title\":\"Active sessions for [<b>{{username}}</b>]\",\"table\":{\"ipaddress\":\"IP address\",\"useragent\":\"User Agent\",\"date\":\"Date\",\"button\":\"Invalidate\"},\"messages\":{\"success\":\"<strong>Session invalidated!</strong>\",\"error\":\"<strong>An error has occurred!</strong> The session could not be invalidated.\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/sessions.json\n// module id = ./src/main/webapp/i18n/en/sessions.json\n// module chunks = 1","module.exports = {\"settings\":{\"title\":\"User settings for [<b>{{username}}</b>]\",\"form\":{\"firstname\":\"First Name\",\"firstname.placeholder\":\"Your first name\",\"lastname\":\"Last Name\",\"lastname.placeholder\":\"Your last name\",\"language\":\"Language\",\"button\":\"Save\"},\"messages\":{\"error\":{\"fail\":\"<strong>An error has occurred!</strong> Settings could not be saved.\",\"emailexists\":\"<strong>Email is already in use!</strong> Please choose another one.\"},\"success\":\"<strong>Settings saved!</strong>\",\"validate\":{\"firstname\":{\"required\":\"Your first name is required.\",\"minlength\":\"Your first name is required to be at least 1 character\",\"maxlength\":\"Your first name cannot be longer than 50 characters\"},\"lastname\":{\"required\":\"Your last name is required.\",\"minlength\":\"Your last name is required to be at least 1 character\",\"maxlength\":\"Your last name cannot be longer than 50 characters\"}}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/settings.json\n// module id = ./src/main/webapp/i18n/en/settings.json\n// module chunks = 1","module.exports = {\"userManagement\":{\"home\":{\"title\":\"Users\",\"createLabel\":\"Create a new user\",\"createOrEditLabel\":\"Create or edit a user\"},\"created\":\"A new user is created with identifier {{ param }}\",\"updated\":\"An user is updated with identifier {{ param }}\",\"deleted\":\"An user is deleted with identifier {{ param }}\",\"delete\":{\"question\":\"Are you sure you want to delete user {{ login }}?\"},\"detail\":{\"title\":\"User\"},\"login\":\"Login\",\"firstName\":\"First name\",\"lastName\":\"Last name\",\"email\":\"Email\",\"activated\":\"Activated\",\"deactivated\":\"Deactivated\",\"profiles\":\"Profiles\",\"langKey\":\"Language\",\"createdBy\":\"Created by\",\"createdDate\":\"Created date\",\"lastModifiedBy\":\"Modified by\",\"lastModifiedDate\":\"Modified date\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/i18n/en/user-management.json\n// module id = ./src/main/webapp/i18n/en/user-management.json\n// module chunks = 1","module.exports = __webpack_public_path__ + \"4d7a941186721ef8150a081fa7cfa010.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main/webapp/static/images/logo-jhipster-react.svg\n// module id = ./src/main/webapp/static/images/logo-jhipster-react.svg\n// module chunks = 1"],"mappingstPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;AAuBA;AA7BA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAAA;AA9BA;AAgCA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;AClEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;ACVA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AApDA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAAA;AAAA;;AAiDA;AA/CA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAIA;AAIA;AACA;;AAAA;AAAA;AAIA;AACA;AAAA;AAjDA;AAmDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AAEA;AAuBA;AAAA;AAEA;AAAA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAQA;AAKA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AArIA;AAuIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChLA;;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;;AAsEA;AArEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AAIA;AAGA;AAGA;AAEA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAYA;AACA;AAAA;AAtEA;AAwEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;ACvGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AApDA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AAQA;AAWA;AAAA;AAAA;;AAoBA;AAlBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAOA;AACA;AAAA;AApBA;AAsBA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAwBA;AAAA;AAEA;AAAA;AAcA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAwCA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAQA;AAIA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAQA;AAKA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AAlJA;AAoJA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/LA;;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAAA;AAAA;;AA0EA;AAzEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AAIA;AAGA;AAEA;AAIA;AAEA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAYA;AACA;AAAA;AA1EA;AA4EA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;AC7GA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AApDA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AAQA;AACA;AAKA;AAaA;AAAA;AAAA;;AAiEA;AA/DA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAUA;AACA;AASA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAjEA;AAmEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA0BA;AAAA;AAEA;AAAA;AAmBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAIA;AAGA;AAGA;AAGA;AAGA;AAGA;AAKA;AAEA;AAIA;AACA;;AAAA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAAA;AAQA;AACA;AAMA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AAhLA;AAkLA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAMA;AASA;AA+BA;AAAA;AACA;AAAA;AAaA;;;;;;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;;AAAA;;;AAGA;AACA;;AAAA;;;AAEA;;;;;;AAVA;;;AAAA;AAAA;AAAA;;;;;AAAA;;;;;AAYA;AAEA;;;;;AACA;AACA;AACA;;AAAA;AACA;AACA;;AAAA;AACA;;AAEA;;AAAA;AACA;;;;;AAGA;AAxCA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAKA;AACA;AAAA;AAhFA;AAkFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA;;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;;AA4EA;AA3EA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AAIA;AAGA;AAGA;AAGA;AAEA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAYA;AACA;AAAA;AA5EA;AA8EA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;AC7GA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AApDA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAUA;AAAA;AAAA;;AAqCA;AAnCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAMA;AACA;;AAAA;AAAA;AAIA;AACA;AAAA;AArCA;AAuCA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAoBA;AAAA;AAEA;AAAA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AA6BA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAQA;AAKA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAxGA;AA0GA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnJA;;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAAA;AAAA;;AA8DA;AA7DA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAYA;AACA;AAAA;AA9DA;AAgEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;AC/FA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAIA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AApDA;AAsDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AASA;AAAA;AAAA;;AAsBA;AApBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAAA;AAIA;AACA;AAAA;AAtBA;AAwBA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAkBA;AAAA;AAEA;AAAA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAIA;AACA;AAMA;AACA;AAAA;AAtEA;AAwEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;;AAAA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAAA;AAAA;;AAsDA;AArDA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAIA;AACA;AAIA;AACA;AACA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;;AAAA;AAAA;AAYA;AACA;AAAA;AAtDA;AAwDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;ACrFA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAeA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AACA;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AANA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/CA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAHA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAAA;AACA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlCA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAqBA;AACA;AACA;AAEA;;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AA3DA;AA6DA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AAAA;AAEA;AAAA;AAiBA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AA7CA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAkCA;AACA;AACA;AAEA;;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAIA;AACA;AAAA;AApFA;AAsFA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AAEA;AAEA;AAQA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;;AAoCA;AA5CA;AACA;AACA;AAQA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AASA;AACA;AAAA;AA9CA;AAgDA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAAA;AAEA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AArDA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AA6CA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAGA;AACA;AACA;AASA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAMA;AAOA;AACA;AAAA;AA9HA;AAgIA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;AC9JA;AAEA;AAEA;AAOA;AACA;AACA;;;;;;;;;;;ACbA;AACA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAzBA;AA8BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAAA;AAEA;AAAA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AArCA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AA+BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AANA;AAYA;AAGA;AACA;AAAA;AAnFA;AAqFA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;AC9GA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAEA;AASA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA3BA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAgBA;AACA;AAAA;AAxEA;AA0EA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;AChGA;AACA;AAEA;AAAA;AAAA;AAKA;AACA;AAGA;AAAA;;AAAA;;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;AAAA;;AACA;;AAAA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAjDA;AAqDA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAIA;AAKA;AACA;AAMA;AAIA;AACA;AACA;;AACA;;AAIA;AAKA;AACA;AAMA;AAKA;AAEA;AACA;;AACA;;AAIA;AAKA;AACA;AAMA;AAKA;AAEA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AACA;AAKA;AAEA;AAAA;;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AAAA;;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AAAA;;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAhMA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAiiBA;AA8iBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;ACzkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAcA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAKA;AACA;AAAA;AAlDA;AAoDA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAAA;AAAA;;AAgEA;AA9DA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AAEA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AAOA;AAIA;;AAAA;AAAA;AAIA;AACA;AAAA;AAhEA;AAkEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAoBA;AAAA;AAEA;AAAA;AAaA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAzBA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAKA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AA9GA;AAgHA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAYA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AA1BA;;AAGA;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAGA;AAIA;AACA;AAOA;AACA;AACA;AASA;AACA;AAKA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;;AAAA;AAAA;AAEA;AAIA;;AAAA;AAAA;AAEA;AAIA;;AAAA;AAAA;AAUA;AACA;AASA;AACA;AAAA;AA1IA;AA4IA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;ACnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAAA;AACA;AAAA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AACA;;AACA;;AACA;AAAA;AAGA;AACA;;AACA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AA7FA;AA+FA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AASA;AAAA;AAEA;AAAA;AAKA;AAAA;AACA;AACA;AACA;AANA;;AACA;AAOA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAMA;AAMA;AACA;AACA;;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AAEA;AACA;AAeA;AAAA;AAEA;AAAA;AAeA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAnBA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAxCA;AA0CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AAEA;AAMA;AAAA;AAAA;;AAgBA;AAdA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAhBA;AAkBA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1EA;;AAEA;;AAEA;AAEA;;AAEA;AAEA;AAEA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAEA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AACA;AAEA;AACA;AAQA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AAHA;AAIA;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1MA;;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AAOA;AACA;AAOA;AACA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;AACA;AACA;AACA;AACA;;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AACA;AAfA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1IA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;ACxBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AACA;AAMA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;ACrKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzBA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAKA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AACA;AACA;AAIA;AAQA;AACA;AAEA;AACA;AAOA;AAEA;AAMA;AAAA;AACA;AAAA;AAOA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAjBA;AACA;AACA;;AACA;AAgrJA;AAuJA;AACA;AACA;;;;;;;;;;;AC5LA;AACA;AACA;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvCA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;;;A","sourceRoot":""}
{"version":3,"file":"1.43aca6d80981cb48bbe4.hot-update.js","sources":["webpack:///./src/main/webapp/app/entities/field/field-detail.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'reactstrap';\n// TODO import TextFormat only when fieldContainsDate\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAction, TextFormat } from 'react-jhipster';\nimport { FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { getEntity } from './field.reducer';\nimport {\n  getEntities as getFieldOptions\n} from '../field-option/field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from '../../config/constants';\nimport { AvForm, AvGroup, AvInput, AvFeedback, AvField } from 'availity-reactstrap-validation';\n\nexport interface IFieldDetailProps {\n  getEntity: ICrudGetAction;\n  getFieldOptions: ICrudGetAction;\n  field: any;\n  Entity: any;\n  fieldKey: any;\n  fieldValue: any;\n  fieldOptions: any[];\n  match: any;\n}\n\nexport class FieldDetail extends React.Component<IFieldDetailProps> {\n\n  componentDidMount() {\n    if (!this.props.Entity) {\n      this.props.getEntity(this.props.match.params.id);\n    }\n    this.props.getFieldOptions();\n  }\n\n  render() {\n    const { fieldKey, fieldValue } = this.props;\n    const field = this.props.Entity || this.props.field;\n    let fieldOptions = this.props.fieldOptions.filter(fieldOption => fieldOption.field.id === this.props.field.id)\n    const fieldType = field => {\n      switch (field.type.toLowerCase()) {\n        case 'text':\n        case 'textarea':\n          return <AvInput key={fieldKey}\n          id={field.id}\n          type={field.type.toLowerCase()}\n          className=\"form-control\"\n          name={field.name}\n          title={field.title}\n          value={fieldValue}/>\n        case 'select':\n          return <AvField type=\"select\" \n          name={field.name}\n          label={field.title}\n          helpMessage=\"\">\n          {fieldOptions.map(fieldOption => (\n             <option value={fieldOption.value}>{fieldOption.label}</option>\n          ))}\n        </AvField>\n      }\n    }\n    return (\n      <div>\n          <AvGroup>       \n            <label>{field.title}</label>\n             { fieldType(field) }\n             {fieldOptions.map(fieldOption => (fieldOption.label))}\n          </AvGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n    field: storeState.field.entity,\n    fieldOptions: storeState.fieldOption.entities\n});\n\nconst mapDispatchToProps = { getEntity, getFieldOptions };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldDetail);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-detail.tsx"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AAKA;AAaA;AAAA;AAAA;;AA6CA;AA3CA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AA7CA;AA+CA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"1.52f5ba81a45791248d0d.hot-update.js","sources":["webpack:///./src/main/webapp/app/entities/field-option/field-option-dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\n\nexport interface IFieldOptionDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  loading: boolean;\n  updating: boolean;\n  fieldOption: any;\n  fields: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFieldOptionDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  fieldId: number;\n  formId: number;\n}\n\nexport class FieldOptionDialog extends React.Component<IFieldOptionDialogProps, IFieldOptionDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew: !this.props.match.params || !this.props.match.params.id,\n      fieldId: 0,\n      formId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n    if (this.props.match.params.fieldId) {\n      this.setState({\n        fieldId: +this.props.match.params.fieldId,\n        formId: +this.props.match.params.formId\n    })\n    }\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    if (!this.state.fieldId) {\n      this.props.history.push('/field-option');\n    } \n    else {\n      this.props.history.push(`/form/${this.state.formId}/field/${this.state.fieldId}/edit`);\n    }\n  }\n\n  fieldUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.fields) {\n        if (id.toString() === this.props.fields[i].id.toString()) {\n            this.setState({\n                fieldId: this.props.fields[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { fieldOption, fields, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}\n        toggle={this.handleClose} size=\"lg\">\n      <ModalHeader toggle={this.handleClose}>\n        <Translate contentKey=\"reactsterApp.fieldOption.home.createOrEditLabel\">Create or edit a FieldOption</Translate>\n      </ModalHeader>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : fieldOption} onSubmit={this.saveEntity} >\n          <ModalBody>\n            { fieldOption.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label id=\"valueLabel\" for=\"value\">\n                <Translate contentKey=\"reactsterApp.fieldOption.value\">\n                  value\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"value\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"labelLabel\" for=\"label\">\n                <Translate contentKey=\"reactsterApp.fieldOption.label\">\n                  label\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"label\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label for=\"field.id\">\n                <Translate contentKey=\"reactsterApp.fieldOption.field\">Field</Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"field.id\"\n                onChange={this.fieldUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  fields.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              <AvInput type=\"text\"\n                name=\"field.id\"\n                value={this.state.fieldId} />\n            </AvGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      }\n    </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  fieldOption: storeState.fieldOption.entity,\n  fields: storeState.fieldOption.fields,\n  loading: storeState.fieldOption.loading,\n  updating: storeState.fieldOption.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldOptionDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field-option/field-option-dialog.tsx"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAuBA;AAAA;AAEA;AAAA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAAA;AAQA;AAKA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AArIA;AAuIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}
{"version":3,"file":"1.598d3a7ad81a922957e5.hot-update.js","sources":["webpack:///./src/main/webapp/app/entities/field/field-dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, ICrudGetAction, ICrudPutAction } from 'react-jhipster';\nimport { FaPlus, FaBan, FaFloppyO } from 'react-icons/lib/fa';\n\nimport { getEntity, updateEntity, createEntity } from './field.reducer';\nimport {\n  getEntities as getFieldOptions\n} from '../field-option/field-option.reducer';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer } from '../../shared/util/date-utils';\n\nexport interface IFieldDialogProps {\n  getEntity: ICrudGetAction;\n  updateEntity: ICrudPutAction;\n  createEntity: ICrudPutAction;\n  getFieldOptions: ICrudGetAction;\n  loading: boolean;\n  updating: boolean;\n  field: any;\n  forms: any[];\n  fieldOptions: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IFieldDialogState {\n  showModal: boolean;\n  isNew: boolean;\n  formId: number;\n}\n\nexport class FieldDialog extends React.Component<IFieldDialogProps, IFieldDialogState> {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isNew:  !this.props.match || !this.props.match.params || !this.props.match.params.id,\n      formId: 0,\n      showModal: true\n    };\n  }\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getEntity(this.props.match.params.id);\n    if (this.props.match.params.formId) {\n      this.setState({\n        formId: +this.props.match.params.formId\n    })\n    }\n    this.props.getFieldOptions();\n  }\n\n  saveEntity = (event, errors, values) => {\n    if (this.state.isNew) {\n      this.props.createEntity(values);\n    } else {\n      this.props.updateEntity(values);\n    }\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.setState({\n        showModal: false\n    });\n    if (!this.state.formId) {\n      this.props.history.push('/field');\n    }\n    else {\n      this.props.history.push(`/form/${this.state.formId}/edit`);\n    }\n  }\n\n  formUpdate = element => {\n    const id = element.target.value;\n    for (const i in this.props.forms) {\n        if (id.toString() === this.props.forms[i].id.toString()) {\n            this.setState({\n                formId: this.props.forms[i].id\n            });\n        }\n    }\n  }\n\n  render() {\n    const isInvalid = false;\n    const { field, forms, loading, updating } = this.props;\n    const { showModal, isNew } = this.state;\n    return (\n      <div >\n      <div >\n        <Translate contentKey=\"reactsterApp.field.home.createOrEditLabel\">Create or edit a Field</Translate>\n      </div>\n      { loading ? <p>Loading...</p>\n      : <AvForm model={isNew ? {} : field} onSubmit={this.saveEntity} >\n          <div>\n            { field.id ?\n              <AvGroup>\n                <Label for=\"id\"><Translate contentKey=\"global.field.id\">ID</Translate></Label>\n                <AvInput type=\"text\" className=\"form-control\" name=\"id\" required readOnly/>\n              </AvGroup>\n              : null\n            }\n            <AvGroup>\n              <Label id=\"typeLabel\">\n                <Translate contentKey=\"reactsterApp.field.type\">\n                  type\n                </Translate>\n              </Label>\n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"type\"\n              >\n                <option value=\"TEXT\">\n                    TEXT\n                </option>\n                <option value=\"TEXTAREA\">\n                    TEXTAREA\n                </option>\n                <option value=\"SELECT\">\n                    SELECT\n                </option>\n                <option value=\"NUMBER\">\n                    NUMBER\n                </option>\n                <option value=\"RADIO\">\n                    RADIO\n                </option>\n                <option value=\"CHECKBOX\">\n                    CHECKBOX\n                </option>\n              </AvInput>\n            </AvGroup>\n            <AvGroup>\n            <Link to={`field-option/new`} className=\"btn btn-primary float-right jh-create-entity\">\n            <FaPlus /> <Translate contentKey=\"reactsterApp.fieldOption.home.createLabel\" />\n          </Link>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"titleLabel\" for=\"title\">\n                <Translate contentKey=\"reactsterApp.field.title\">\n                  title\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"title\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n            <AvGroup>\n              <Label id=\"nameLabel\" for=\"name\">\n                <Translate contentKey=\"reactsterApp.field.name\">\n                  name\n                </Translate>\n              </Label>\n              <AvInput type=\"text\" className=\"form-control\" name=\"name\" required />\n              <AvFeedback>This field is required.</AvFeedback>\n              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n            </AvGroup>\n           \n            <AvGroup>\n              <Label for=\"form.id\">\n                <Translate contentKey=\"reactsterApp.field.form\">Form</Translate>\n              </Label>\n              { !this.props.match.params.formId ? \n              <AvInput type=\"select\"\n                className=\"form-control\"\n                name=\"form.id\"\n                onChange={this.formUpdate}>\n                <option value=\"\" key=\"0\" />\n                {\n                  forms.map(otherEntity =>\n                    <option\n                      value={otherEntity.id}\n                      key={otherEntity.id}>\n                      {otherEntity.id}\n                    </option>\n                  )\n                }\n              </AvInput>\n              : null }\n              <AvInput type=\"number\"\n              readOnly\n                name=\"form.id\"\n                value={this.state.formId} />\n            </AvGroup>\n          </div>\n          <div>\n            <Button color=\"secondary\" onClick={this.handleClose}>\n              <FaBan/>&nbsp;\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n              <FaFloppyO/>&nbsp;\n              <Translate contentKey=\"entity.action.save\">Save</Translate>\n            </Button>\n          </div>\n        </AvForm>\n      }\n    </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  field: storeState.field.entity,\n  forms: storeState.field.forms,\n  loading: storeState.field.loading,\n  updating: storeState.field.updating\n});\n\nconst mapDispatchToProps = { getEntity, updateEntity, createEntity };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FieldDialog);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/tslint-loader!./src/main/webapp/app/entities/field/field-dialog.tsx"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA2BA;AAAA;AAEA;AAAA;AAmBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/CA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAIA;AAGA;AAGA;AAGA;AAGA;AAGA;AAKA;AACA;AACA;;AAAA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAAA;AAQA;AACA;AAMA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AAOA;AACA;AAAA;AA1KA;AA4KA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}